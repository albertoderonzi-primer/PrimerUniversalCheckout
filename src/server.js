// This app is built using express
const path = require('path');
const bodyParser = require('body-parser');
const express = require('express');
const fetch = require('node-fetch');
require('dotenv').config();

///////////////////////////////////////////
// ‚öôÔ∏è Setup Server
///////////////////////////////////////////

const app = express();
// initialise payment_id
var payment_id = 0;

const staticDir = path.join(__dirname, 'static');

// for Headless select checkout-headless.html
// DEPRECATED - for dropin select checkout-original.html 
const checkoutPage = path.join(__dirname, 'static', 'checkout-headless.html');
const applepayfile = path.join(__dirname, 'static/.well-known', 'apple-developer-merchantid-domain-association');


// setting up cors
const cors = require("cors");
app.use(cors());

app.use(bodyParser.json());
app.use('/static', express.static(staticDir));

app.get('/', (req, res) => {
  return res.sendFile(checkoutPage);
});

app.get('/.well-known/apple-developer-merchantid-domain-association', (req, res) => {
  return res.sendFile(applepayfile);
});

///////////////////////////////////////////
// ‚ú® All the magic is here !
///////////////////////////////////////////

const PRIMER_API_URLS = {
  SANDBOX: 'https://api.sandbox.primer.io',
  PRODUCTION: 'https://api.primer.io',
}

const API_KEY = process.env.API_KEY;
const API_VERSION = process.env.API_VERSION;
const PRIMER_API_URL = PRIMER_API_URLS[process.env.PRIMER_API_ENVIRONMENT];
const LEGACY_WORKFLOW = process.env.LEGACY_WORKFLOW;

// First API Call: Create client session. This will return a client token that needs to be passed back to front-end
// to load the SDK

app.post('/client-session', async (req, res) => {
  const url = `${PRIMER_API_URL}/client-session`;
  console.log("S - Client Session API: start");
  let requestBody = req.body.orderInfo;
  console.log("S - Request Body:", requestBody);

  // If the order details are not passed from the front end, get the info from hardcoded data in the backend.
  if (!requestBody) {
    console.log("S - Requestiing order info");
    requestBody = getOrderInfo()
  }

  console.log("S - Request Body:", requestBody);

  const response = await fetch(url, {
    method: 'post',
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json',
      'X-Api-Version': API_VERSION,
      'X-Api-Key': API_KEY,
      'Legacy-workflows': LEGACY_WORKFLOW,
      //'Legacy-workflows' : false,

    },
    body: JSON.stringify(requestBody),
  }).then(data => data.json());

  console.log("S - Create Session API: Response", response);
  if (response.error) {
    console.log("S - Create Session API: Response error", JSON.stringify(response.error.validationErrors));
  }

  return res.send(response);
});


// Second API Call (used only in manual Flow): Create payment
app.post('/create-payment', async (req, res) => {
  console.log("S - Create Payment API: Start");

  const url = `${PRIMER_API_URL}/payments`;

  console.log("S - Create Payment API: body");
  console.log(req.body);

  const api_body = req.body;

  const response = await fetch(url, {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
      'X-Api-Version': API_VERSION,
      'X-Api-Key': API_KEY,
      'X-Idempotency-Key': '1112' + Math.random(),
      'Legacy-workflows': LEGACY_WORKFLOW
      //'Legacy-workflows' : true

    },

    body: JSON.stringify(api_body),
  }).then(data => data.json());

  console.log("Create Payment API: Response");
  console.log(response);
  payment_id = response.id;
  return res.send(response);

});

// Third API Call (for manual flow): Resume token. This will send the resume token generated by the SDK to Primer
app.post('/resume', async (req, res) => {
  console.log("Resume API: Start");

  const url = `${PRIMER_API_URL}/payments/` + payment_id + `/resume`;

  console.log("Resume API: Body");
  console.log(req.body);

  const api_body = req.body;
  //TODO add check on response
  const response = await fetch(url, {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
      'X-Api-Version': API_VERSION,
      'X-Api-Key': API_KEY,
      'Legacy-workflows': LEGACY_WORKFLOW
      //'Legacy-workflows' : true


    },

    body: JSON.stringify(api_body),
  }).then(data => data.json());
  console.log("Resume API: Response");
  console.log(response);

  return res.send(response);
});


// Optional API call (still to be properly implemented) to update the session when something changes in the order details
// TODO: Implement Front end
app.patch('/patch-session', async (req, res) => {
  console.log("Patch Session API: Start");

  const url = `${PRIMER_API_URL}/client-session`;
  const api_body = req.body;

  const response = await fetch(url, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',

      'X-Api-Version': API_VERSION,
      'X-Api-Key': API_KEY,
    },


    body: JSON.stringify(api_body),

  }).then(data => data.json());
  console.log("Patch Session API: Response");
  console.log(response);

  return res.send(response);

});


// Generate order info if those are not passed from the Frontend
const getOrderInfo = () => {
  return {

    // ORIGINAL BODY
    // Create an orderId for this client session
    // Make sure to keep track of it: you will later receive updates through Webhooks.
    orderId: 'order-' + Math.random(),

    customerId: "albertoTest1",
    customer: {
      emailAddress: "test@primer.io",
      mobileNumber: "+44841234517",
      firstName: "Alberto",
      lastName: "Deronzi",
      shippingAddress: {
        firstName: "Alberto",
        lastName: "Deronzi",
        addressLine1: "47A",
        postalCode: "CB94B9",
        city: "Cambridge",
        state: "Cambridgeshire",
        countryCode: "GB"
      },
      billingAddress: {
        firstName: "Alberto",
        lastName: "Deronzi",
        postalCode: "se108up",
        addressLine1: "test",
        addressLine2: "test",
        countryCode: "GB",
        city: "london "
      }
    },

    order: {
      lineItems: [{
        itemId: "item-1",
        description: "My item",
        amount: 100,
        quantity: 1
      }],
      countryCode: "GB"
    },
    // 3-character Currency Code used for all the amount of this session
    amount: 100,
    currencyCode: "GBP",
    paymentMethod: {
      paymentType: "FIRST_PAYMENT",
      descriptor: "Alberto Transfer",
      vaultOnSuccess: true
    },
    metadata: {
      Test: "False"
    },

    //        Check all the other options at https://apiref.primer.io/v2/reference/create_client_side_token_client_session_post
  };
};


///////////////////////////////////////////
// üèÉ‚Äç‚ôÇÔ∏è Run Server
///////////////////////////////////////////

const PORT = process.env.PORT || 8880;
console.log(`Checkout server listening on port ${PORT}.\nYou can now view the Checkout in a web browser at http://localhost:${PORT}`);
app.listen(PORT, '127.0.0.1');
