// Generated by dts-bundle-generator v6.9.0

export declare const preloadPrimer: () => Promise<void>;
export declare enum CheckoutUXFlow {
	CHECKOUT = "CHECKOUT",
	EXPRESS_CHECKOUT = "EXPRESS_CHECKOUT",
	HEADLESS_CHECKOUT = "HEADLESS_CHECKOUT",
	MANAGE_PAYMENT_METHODS = "MANAGE_PAYMENT_METHODS",
	SINGLE_PAYMENT_METHOD_CHECKOUT = "SINGLE_PAYMENT_METHOD_CHECKOUT"
}
export declare enum PaymentFlow {
	DEFAULT = "DEFAULT",
	PREFER_VAULT = "PREFER_VAULT"
}
export declare enum ThreeDSecureStatus {
	SUCCESS = "AUTH_SUCCESS",
	FAILED = "AUTH_FAILED",
	SKIPPED = "SKIPPED",
	CHALLENGE = "CHALLENGE"
}
export declare enum PaymentInstrumentType {
	WORLDPAY_IDEAL = "WORLDPAY_IDEAL",
	ADYEN_KLARNA = "ADYEN_KLARNA",
	ADYEN_BANCONTACT_CARD = "ADYEN_BANCONTACT_CARD",
	PAY_NL_KAARTDIRECT = "PAY_NL_KAARTDIRECT",
	ADYEN_EPS = "ADYEN_EPS",
	ADYEN_BANCONTACT_PAYCONIQ = "ADYEN_BANCONTACT_PAYCONIQ",
	OMISE_PROMPTPAY = "OMISE_PROMPTPAY",
	OMISE_TRUEMONEY = "OMISE_TRUEMONEY",
	ADYEN_MULTIBANCO = "ADYEN_MULTIBANCO",
	PACYPAY_WECHAT = "PACYPAY_WECHAT",
	PACYPAY_ALIPAY = "PACYPAY_ALIPAY",
	ADYEN_MBWAY = "ADYEN_MBWAY",
	XENDIT_DANA = "XENDIT_DANA",
	XENDIT_SHOPEEPAY = "XENDIT_SHOPEEPAY",
	ADYEN_PAYSHOP = "ADYEN_PAYSHOP",
	ADYEN_PAYTRAIL = "ADYEN_PAYTRAIL",
	CLEARPAY = "CLEARPAY",
	RAPYD_FAST = "RAPYD_FAST",
	RAPYD_PROMPTPAY = "RAPYD_PROMPTPAY",
	RAPYD_GCASH = "RAPYD_GCASH",
	RAPYD_POLI = "RAPYD_POLI",
	RAPYD_GRABPAY = "RAPYD_GRABPAY",
	PRIMER_PAYPAL = "PRIMER_PAYPAL",
	TWOC2P = "TWOC2P",
	NETS = "NETS",
	STRIPE_GIROPAY = "STRIPE_GIROPAY",
	MOLLIE_GIROPAY = "MOLLIE_GIROPAY",
	MOLLIE_EPS = "MOLLIE_EPS",
	PAY_NL_EPS = "PAY_NL_EPS",
	PAY_NL_P24 = "PAY_NL_P24",
	MOLLIE_P24 = "MOLLIE_P24",
	MOLLIE_SOFORT = "MOLLIE_SOFORT",
	COINBASE = "COINBASE",
	OPENNODE = "OPENNODE",
	MOLLIE_GIFT_CARD = "MOLLIE_GIFTCARD",
	XFERS_PAYNOW = "XFERS_PAYNOW",
	CARD = "PAYMENT_CARD",
	APPLE_PAY = "APPLE_PAY",
	GOOGLE_PAY = "GOOGLE_PAY",
	PAYPAL = "PAYPAL_ORDER",
	PAYPAL_VAULTED = "PAYPAL_BILLING_AGREEMENT",
	GO_CARDLESS = "GOCARDLESS",
	PAY_NL_IDEAL = "PAY_NL_IDEAL",
	PAY_NL_SOFORT_BANKING = "PAY_NL_SOFORT_BANKING",
	PAY_NL_BANCONTACT = "PAY_NL_BANCONTACT",
	PAY_NL_PAYPAL = "PAY_NL_PAYPAL",
	PAY_NL_CREDIT_TRANSFER = "PAY_NL_CREDIT_TRANSFER",
	PAY_NL_DIRECT_DEBIT = "PAY_NL_DIRECT_DEBIT",
	PAY_NL_GIROPAY = "PAY_NL_GIROPAY",
	PAY_NL_PAYCONIQ = "PAY_NL_PAYCONIQ",
	HOOLAH = "HOOLAH",
	ADYEN_BLIK = "ADYEN_BLIK",
	ADYEN_VIPPS = "ADYEN_VIPPS",
	ADYEN_GIROPAY = "ADYEN_GIROPAY",
	ADYEN_SOFORT = "ADYEN_SOFORT",
	ADYEN_TRUSTLY = "ADYEN_TRUSTLY",
	ADYEN_ALIPAY = "ADYEN_ALIPAY",
	ADYEN_TWINT = "ADYEN_TWINT",
	ADYEN_MOBILEPAY = "ADYEN_MOBILEPAY",
	MOLLIE_BANCONTACT = "MOLLIE_BANCONTACT",
	MOLLIE_IDEAL = "MOLLIE_IDEAL",
	BUCKAROO_GIROPAY = "BUCKAROO_GIROPAY",
	BUCKAROO_EPS = "BUCKAROO_EPS",
	BUCKAROO_SOFORT = "BUCKAROO_SOFORT",
	BUCKAROO_BANCONTACT = "BUCKAROO_BANCONTACT",
	BUCKAROO_IDEAL = "BUCKAROO_IDEAL",
	ATOME = "ATOME"
}
export declare enum PaymentMethodType {
	WORLDPAY_IDEAL = "WORLDPAY_IDEAL",
	ADYEN_KLARNA = "ADYEN_KLARNA",
	ADYEN_BANCONTACT_CARD = "ADYEN_BANCONTACT_CARD",
	PAY_NL_KAARTDIRECT = "PAY_NL_KAARTDIRECT",
	ADYEN_EPS = "ADYEN_EPS",
	ADYEN_BANCONTACT_PAYCONIQ = "ADYEN_BANCONTACT_PAYCONIQ",
	OMISE_PROMPTPAY = "OMISE_PROMPTPAY",
	OMISE_TRUEMONEY = "OMISE_TRUEMONEY",
	ADYEN_MULTIBANCO = "ADYEN_MULTIBANCO",
	PACYPAY_WECHAT = "PACYPAY_WECHAT",
	PACYPAY_ALIPAY = "PACYPAY_ALIPAY",
	ADYEN_MBWAY = "ADYEN_MBWAY",
	XENDIT_DANA = "XENDIT_DANA",
	XENDIT_SHOPEEPAY = "XENDIT_SHOPEEPAY",
	ADYEN_PAYSHOP = "ADYEN_PAYSHOP",
	ADYEN_PAYTRAIL = "ADYEN_PAYTRAIL",
	CLEARPAY = "CLEARPAY",
	RAPYD_FAST = "RAPYD_FAST",
	RAPYD_PROMPTPAY = "RAPYD_PROMPTPAY",
	RAPYD_GCASH = "RAPYD_GCASH",
	RAPYD_POLI = "RAPYD_POLI",
	RAPYD_GRABPAY = "RAPYD_GRABPAY",
	PRIMER_PAYPAL = "PRIMER_PAYPAL",
	TWOC2P = "TWOC2P",
	NETS = "NETS",
	STRIPE_GIROPAY = "STRIPE_GIROPAY",
	MOLLIE_GIROPAY = "MOLLIE_GIROPAY",
	MOLLIE_EPS = "MOLLIE_EPS",
	PAY_NL_EPS = "PAY_NL_EPS",
	PAY_NL_P24 = "PAY_NL_P24",
	MOLLIE_P24 = "MOLLIE_P24",
	MOLLIE_SOFORT = "MOLLIE_SOFORT",
	COINBASE = "COINBASE",
	OPENNODE = "OPENNODE",
	MOLLIE_GIFT_CARD = "MOLLIE_GIFTCARD",
	XFERS_PAYNOW = "XFERS_PAYNOW",
	PAYMENT_CARD = "PAYMENT_CARD",
	APPLE_PAY = "APPLE_PAY",
	GOOGLE_PAY = "GOOGLE_PAY",
	PAYPAL = "PAYPAL",
	GO_CARDLESS = "GOCARDLESS",
	KLARNA = "KLARNA",
	PAY_NL_IDEAL = "PAY_NL_IDEAL",
	PAY_NL_SOFORT_BANKING = "PAY_NL_SOFORT_BANKING",
	PAY_NL_BANCONTACT = "PAY_NL_BANCONTACT",
	PAY_NL_PAYPAL = "PAY_NL_PAYPAL",
	PAY_NL_CREDIT_TRANSFER = "PAY_NL_CREDIT_TRANSFER",
	PAY_NL_DIRECT_DEBIT = "PAY_NL_DIRECT_DEBIT",
	PAY_NL_GIROPAY = "PAY_NL_GIROPAY",
	PAY_NL_PAYCONIQ = "PAY_NL_PAYCONIQ",
	HOOLAH = "HOOLAH",
	ADYEN_BLIK = "ADYEN_BLIK",
	ADYEN_MOBILEPAY = "ADYEN_MOBILEPAY",
	ADYEN_VIPPS = "ADYEN_VIPPS",
	ADYEN_GIROPAY = "ADYEN_GIROPAY",
	ADYEN_SOFORT = "ADYEN_SOFORT",
	ADYEN_TRUSTLY = "ADYEN_TRUSTLY",
	ADYEN_ALIPAY = "ADYEN_ALIPAY",
	ADYEN_TWINT = "ADYEN_TWINT",
	ADYEN_BANK_TRANSFER = "ADYEN_BANK_TRANSFER",
	MOLLIE_BANCONTACT = "MOLLIE_BANCONTACT",
	MOLLIE_IDEAL = "MOLLIE_IDEAL",
	BUCKAROO_GIROPAY = "BUCKAROO_GIROPAY",
	BUCKAROO_EPS = "BUCKAROO_EPS",
	BUCKAROO_SOFORT = "BUCKAROO_SOFORT",
	BUCKAROO_BANCONTACT = "BUCKAROO_BANCONTACT",
	BUCKAROO_IDEAL = "BUCKAROO_IDEAL",
	ATOME = "ATOME"
}
export declare enum TokenType {
	SINGLE_USE = "SINGLE_USE",
	MULTI_USE = "MULTI_USE"
}
export type Nullable<T> = T | null;
export declare enum ErrorCode {
	INITIALIZATION_ERROR = "INITIALIZATION_ERROR",
	NO_PAYMENT_METHODS = "NO_PAYMENT_METHODS",
	PRIMER_TEARDOWN = "PRIMER_TEARDOWN",
	PRIMER_SERVER_ERROR = "PRIMER_SERVER_ERROR",
	THREE_DS_SETUP_ERROR = "THREE_DS_SETUP_ERROR",
	THREE_DS_AUTH_FAILED = "THREE_DS_AUTH_FAILED",
	THREE_DS_NEGOTIATION_ERROR = "THREE_DS_NEGOTIATION_ERROR",
	TOKENIZATION_ERROR = "TOKENIZATION_ERROR",
	DUPLICATE_PAYMENT_METHOD_ERROR = "DUPLICATE_PAYMENT_METHOD_ERROR",
	CARD_NUMBER_ERROR = "CARD_NUMBER_ERROR",
	PAYMENT_METHOD_NOT_SETUP = "PAYMENT_METHOD_NOT_SETUP",
	PAYMENT_METHOD_NOT_PROVIDED = "PAYMENT_METHOD_NOT_SETUP",
	PAYMENT_METHOD_NOT_COMPATIBLE = "PAYMENT_METHOD_NOT_COMPATIBLE",
	RESUME_ERROR = "RESUME_ERROR",
	TAX_ERROR = "TAX_ERROR",
	VALIDATION_ERROR = "VALIDATION_ERROR",
	PAYMENT_FAILED = "PAYMENT_FAILED",
	PAYMENT_CREATION_ABORTED = "PAYMENT_CREATION_ABORTED",
	PAYMENT_CREATION_DISABLED = "PAYMENT_CREATION_DISABLED",
	CLIENT_SESSION_UPDATE_ERROR = "CLIENT_SESSION_UPDATE_ERROR",
	INVALID_ARGUMENT = "INVALID_ARGUMENT"
}
export interface ErrorOptions {
	message: string;
	diagnosticsId?: string;
	errorId?: string;
	data?: any;
	isFromDeveloper?: boolean;
}
declare class PrimerClientError extends Error {
	code: ErrorCode;
	message: string;
	diagnosticsId: Nullable<string>;
	data?: any;
	isFromDeveloper: boolean;
	static fromErrorCode(code: ErrorCode, options: ErrorOptions): PrimerClientError;
	constructor(code: ErrorCode, options: ErrorOptions);
}
export interface CardMetadata {
	type: CardNetwork | null;
	possibleTypes: string[];
	cvvLength: number;
	cardNumberLength: number;
}
declare enum ProductType {
	DIGITAL = "DIGITAL",
	PHYSICAL = "PHYSICAL"
}
export interface ClientSessionLineItem {
	amount: number;
	description: string;
	discountAmount?: number;
	itemId: string;
	productType?: ProductType;
	quantity: number;
	taxAmount?: number;
	taxCode?: string;
}
export interface ClientSessionShipping {
	amount: number;
	methodId?: string;
	methodName?: string;
	methodDescription?: string;
}
export interface ClientSessionFeeItem {
	type?: string;
	description?: string;
	amount: number;
}
export interface ClientSessionAddress {
	firstName?: string;
	lastName?: string;
	addressLine1?: string;
	addressLine2?: string;
	city?: string;
	state?: string;
	countryCode?: string;
	postalCode?: string;
}
export interface ClientSession {
	orderId?: string;
	currencyCode?: string;
	lineItems?: ClientSessionLineItem[];
	totalAmount?: number;
	customerId?: string;
	orderDetails?: {
		countryCode?: string;
		shipping?: ClientSessionShipping;
		fees?: ClientSessionFeeItem[];
	};
	customer?: {
		emailAddress?: string;
		mobileNumber?: string;
		firstName?: string;
		lastName?: string;
		billingAddress?: ClientSessionAddress;
		shippingAddress?: ClientSessionAddress;
		taxId?: string;
		nationalDocumentId?: string;
	};
	paymentMethod?: {
		vaultOnSuccess?: boolean;
		options?: Record<string, any>;
	};
}
export type PaymentMethodData = AdyenMultibancoPaymentData;
export type AdyenMultibancoPaymentData = {
	paymentMethodType: PaymentMethodType.ADYEN_MULTIBANCO;
	reference: string;
	expiresAt: string;
	entity: string;
};
export interface BackgroundColor {
	colored: string;
	dark: string;
	light: string;
}
export interface IconUrl {
	colored: string;
	dark: string;
	light: string;
}
export interface PositionalConfig {
	container: string;
}
export interface ApplePayOptions extends PositionalConfig {
	buttonType?: "plain" | "buy" | "set-up" | "donate" | "check-out" | "book" | "subscribe";
	buttonStyle?: "white" | "white-outline" | "black";
	captureBillingAddress?: boolean;
}
export interface DirectDebitOptions {
	customerCountryCode: Alpha2CountryCode;
	companyName: string;
	companyAddress: string;
	customerName?: string;
	customerEmail?: string;
	customerAddressLine1?: string;
	customerAddressLine2?: string;
	customerCity?: string;
	customerPostalCode?: string;
	iban?: string;
	submitButtonLabels?: {
		form?: Label;
		mandate: Label;
	};
}
export type GooglePayButtonType = 
/** @deprecated Set buttonSizeMode to fill instead  */
"long"
/** @deprecated Set buttonSizeMode to static instead */
 | "short" | "book" | "buy" | "checkout" | "donate" | "order" | "pay" | "plain" | "subscribe";
export type GooglePayButtonColor = "default" | "black" | "white";
export type GooglePayButtonSizeMode = "fill" | "static";
export interface GooglePayOptions extends PositionalConfig {
	buttonType?: GooglePayButtonType;
	buttonColor?: GooglePayButtonColor;
	buttonSizeMode?: GooglePayButtonSizeMode;
	onClick?: () => void;
	captureBillingAddress?: boolean;
}
export interface PayPalOptions extends PositionalConfig {
	buttonColor?: "gold" | "blue" | "silver" | "white" | "black";
	buttonShape?: "pill" | "rect";
	buttonSize?: "small" | "medium" | "large" | "responsive";
	buttonHeight?: number;
	buttonLabel?: "checkout" | "credit" | "pay" | "buynow" | "paypal" | "installment";
	buttonTagline?: boolean;
	paymentFlow?: PaymentFlow;
	onClick?: () => void;
}
export interface BorderStyle {
	borderStyle?: string;
	borderColor?: number | string;
	borderWidth?: number | string;
}
export interface TextAlignmentStyle {
	textAlign?: string;
}
export interface TextStyle {
	color?: string;
	fontFamily?: string;
	fontWeight?: string;
	fontSize?: string;
	fontSmoothing?: string;
	lineHeight?: string;
	textTransform?: string;
	letterSpacing?: string;
}
export interface BlockStyle extends BorderStyle {
	background?: string;
	borderRadius?: number | string;
	boxShadow?: string;
}
export type LogoColor = "DARK" | "LIGHT" | "COLORED";
export interface LoadingScreenStyle {
	color?: string;
}
export interface BaseInputStyle extends TextStyle, BlockStyle {
	height?: number | string;
	paddingHorizontal?: number;
}
export interface InputStyle extends BaseInputStyle {
	hover?: BaseInputStyle;
	focus?: BaseInputStyle;
	placeholder?: BaseInputStyle;
	webkitAutofill?: BaseInputStyle;
	selection?: BaseInputStyle;
}
export interface BaseSubmitButtonStyle extends TextStyle, BlockStyle {
}
export interface SubmitButtonStyle extends BaseSubmitButtonStyle {
	hover?: BaseSubmitButtonStyle;
	focus?: BaseSubmitButtonStyle;
}
export interface SubmitButtonStyles {
	base?: SubmitButtonStyle;
	disabled?: SubmitButtonStyle;
	loading?: SubmitButtonStyle;
}
export interface InputStyles {
	base?: InputStyle;
	error?: InputStyle;
}
export interface BaseSavedPaymentMethodButtonStyle extends TextStyle, BlockStyle {
}
export interface SavedPaymentMethodButtonStyle extends BaseSavedPaymentMethodButtonStyle {
	hover?: BaseSavedPaymentMethodButtonStyle;
	focus?: BaseSavedPaymentMethodButtonStyle;
}
export interface SavedPaymentMethodButtonStyles {
	base?: SavedPaymentMethodButtonStyle;
	selected?: SavedPaymentMethodButtonStyle;
}
export interface ShowMorePaymentMethodsButtonStyles {
	base?: TextStyle;
	disabled?: TextStyle;
}
export interface DirectDebitMandateStyle {
	header?: TextStyle;
	label?: TextStyle;
	content?: TextStyle;
	creditorDetails?: TextStyle;
}
export interface DirectDebitSuccessStyle {
	icon?: {
		color?: string;
	};
}
export interface PaymentMethodButtonStyle extends BlockStyle {
	height?: number;
	minHeight?: number;
	maxHeight?: number;
	primaryText?: TextStyle;
	logoColor?: LogoColor;
	marginTop?: string;
}
export interface BackButtonStyle {
	color?: string;
}
export interface EditButtonStyle {
	color?: string;
	background?: string;
}
export interface SeparatorStyle {
	color?: string;
}
export interface ErrorMessageStyle extends BlockStyle, TextStyle {
	color?: string;
}
export interface FormSpacings {
	betweenLabelAndInput?: string;
	betweenInputs?: string;
}
export interface FontFace {
	fontFamily?: string;
	src?: string;
	unicodeRange?: string;
	fontVariant?: string;
	fontFeatureSettings?: string;
	fontVariationSettings?: string;
	fontStretch?: string;
	fontWeight?: string;
	fontStyle?: string;
}
export interface Stylesheet {
	href: string;
}
export interface VaultMenuStyle {
	editButton?: EditButtonStyle & TextStyle;
	item?: {
		label?: TextStyle;
		actionButton?: TextStyle;
		confirmButton?: BlockStyle & TextStyle;
	};
}
export interface NetworkErrorStyles {
	button?: {
		base: BlockStyle & TextStyle;
	};
}
export interface ProcessingIndicatorStyle {
	color?: string;
}
export interface CheckoutStyle {
	fontFaces?: Array<FontFace>;
	stylesheets?: Array<Stylesheet>;
	loadingScreen?: LoadingScreenStyle;
	input?: InputStyles;
	inputLabel?: TextStyle;
	inputErrorText?: TextStyle & TextAlignmentStyle;
	formSpacings?: FormSpacings;
	showMorePaymentMethodsButton?: ShowMorePaymentMethodsButtonStyles;
	networkError?: NetworkErrorStyles;
	submitButton?: SubmitButtonStyles;
	vaultTitle?: TextStyle;
	savedPaymentMethodButton?: SavedPaymentMethodButtonStyles;
	paymentMethodButton?: PaymentMethodButtonStyle;
	errorMessage?: ErrorMessageStyle;
	smallPrint?: TextStyle;
	directDebit?: {
		mandate?: DirectDebitMandateStyle;
		success?: DirectDebitSuccessStyle;
	};
	vaultMenu?: VaultMenuStyle;
	backButton?: BackButtonStyle;
	separator?: SeparatorStyle;
	processingIndicator?: ProcessingIndicatorStyle;
	focusCheckoutOnInit?: boolean;
}
export interface TransitionDurationOptions {
	enter?: number;
	exit?: number;
}
export interface SubmitButtonOptions {
	amountVisible?: boolean;
	useBuiltInButton?: boolean;
	onVisible?: (isVisible: boolean, context: {
		currentSceneId: string;
		previousSceneId?: string;
	}) => void;
	onContentChange?: (content: string, context: {
		currentSceneId: string;
	}) => void;
	onDisable?: (isDisabled: boolean, context: {
		currentSceneId: string;
	}) => void;
	onLoading?: (isLoading: boolean, context: {
		currentSceneId: string;
	}) => void;
}
export interface ProcessingIndicatorOptions {
	visible?: boolean;
}
export interface FormOptions {
	inputLabelsVisible?: boolean;
}
export type CardPreferredFlow = "DEDICATED_SCENE" | "EMBEDDED_IN_HOME";
export interface CheckoutCardOptions {
	cardholderName?: {
		/**
		 * Only works if the cardholder name is visible
		 */
		required?: boolean;
		/**
		 * @deprecated Set it on your Dashboard
		 */
		visible?: boolean;
		placeholder?: Label;
	};
	cardNumber?: {
		placeholder?: Label;
	};
	expiryDate?: {
		placeholder?: Label;
	};
	cvv?: {
		placeholder?: Label;
	};
	preferredFlow?: CardPreferredFlow;
}
export interface ErrorMessageOptions {
	disabled?: boolean;
	onErrorMessageShow?: (message: string) => void;
	onErrorMessageHide?: () => void;
}
export declare enum SuccessScreenType {
	PAYMENT_METHOD = "PAYMENT_METHOD",
	CHECK = "CHECK"
}
export interface CardDetails {
	last4Digits: string;
	cardNumber: string;
	name: string;
	icon: string;
	network: string;
	userDescription?: string;
}
export type CardNetwork = "american-express" | "diners-club" | "discover" | "elo" | "hiper" | "hipercard" | "interac" | "jcb" | "maestro" | "mastercard" | "mir" | "unionpay" | "private-label" | "visa";
export interface PayPalDetails {
	icon: string;
	email?: string;
}
export interface CustomizablePaymentMethodButton {
	logoSrc: string;
	background: string;
	logoAlt?: string;
	text?: string;
}
export type KlarnaPaymentCategoryType = "pay_now" | "pay_later" | "pay_over_time";
export type KlarnaSupportedLocale = "de-AT" | "en-AT" | "da-DK" | "en-DK" | "fi-FI" | "sv-FI" | "en-FI" | "de-DE" | "en-DE" | "nl-NL" | "en-NL" | "nb-NO" | "en-NO" | "sv-SE" | "en-SE" | "de-CH" | "fr-CH" | "it-CH" | "en-CH" | "en-GB" | "en-US" | "en-AU" | "nl-BE" | "fr-BE" | "es-ES" | "it-IT";
export interface KlarnaAddress {
	title?: string;
	firstName?: string;
	lastName?: string;
	phoneNumber?: string;
	postalCode?: string;
	addressLine1?: string;
	addressLine2?: string;
	countryCode?: Alpha2CountryCode;
	city?: string;
	email?: string;
}
export interface KlarnaCustomerDetails {
	dateOfBirth?: string;
	gender?: "MALE" | "FEMALE";
	nationalIdentificationNumber?: string;
	title?: string;
}
export interface KlarnaOptions {
	paymentFlow?: PaymentFlow;
	recurringPaymentDescription?: string;
	allowedPaymentCategories?: KlarnaPaymentCategoryType[];
}
export type SupportedLocale = string;
export type Alpha2CountryCode = string;
export type Alpha3CurrencyCode = string;
export type ElementOrID = Nullable<string | HTMLElement>;
export type ValidationErrorType = "required" | "invalid";
export type Label<T extends Record<string, unknown> = Record<string, unknown>> = string | ((options: {
	locale: SupportedLocale;
} | T) => string);
export type ResumeToken = {
	resumeToken: string;
	paymentId?: string;
};
export interface InputValidationError {
	name: string;
	error: string;
	message: string;
}
export interface Validation {
	valid: boolean;
	validationErrors: InputValidationError[];
	error?: string;
}
export interface InputMetadata {
	errorCode: string | null;
	error: string | null;
	valid: boolean;
	active: boolean;
	dirty: boolean;
	touched: boolean;
	submitted: boolean;
}
export interface FormState {
	dirty: boolean;
	touched: boolean;
	active: boolean;
	valid: boolean;
	submitted: boolean;
}
export type InlineStyleMap = Partial<Record<keyof CSSStyleDeclaration, string>>;
export interface ExternalPayerInfo {
	externalPayerId: string;
	firstName?: string;
	lastName?: string;
	email?: string;
}
export interface CustomerAddress {
	firstName?: string;
	lastName?: string;
	addressLine1?: string;
	addressLine2?: string;
	addressLine3?: string;
	city?: string;
	state?: string;
	countryCode?: Alpha2CountryCode;
	postalCode?: string;
}
export interface CustomerDetails {
	customerTaxId?: string;
	shippingAddress?: CustomerAddress;
	billingAddress?: CustomerAddress;
}
export interface BusinessDetails {
	address?: CustomerAddress;
	nexusAddresses?: [
		CustomerAddress
	];
}
export interface MonetaryAmount {
	value: number | string;
	currency: Alpha3CurrencyCode;
}
export interface OrderItem {
	name: string;
	unitAmount: number | string;
	taxAmount?: number;
	reference?: string;
	quantity?: number;
	discountAmount?: number | string;
	taxCode?: string;
	productType?: ProductType;
}
export interface OrderDetails {
	totalAmount?: number | string;
	totalTaxAmount?: number | string;
	currencyCode?: Alpha3CurrencyCode;
	items?: OrderItem[];
	shippingAmount?: number | string;
	taxExemptionType?: string;
}
export interface ThreeDSecureOrderDetails {
	amount: MonetaryAmount;
	email: string;
	billingAddress: CustomerAddress;
	orderId: string;
}
export interface ThreeDSVerificationOptions {
	token: string;
	container: string;
	order: ThreeDSecureOrderDetails;
	testScenario?: string;
	onChallengeStart?: () => void;
	onChallengeEnd?: () => void;
}
export interface ThreeDSAuthenticationData {
	responseCode: ThreeDSecureStatus;
	reasonCode?: string;
	reasonText?: string;
	protocolVersion: string;
	challengeIssued: boolean;
}
export interface VaultData {
	customerId: string;
}
export interface PaymentCardDetails {
	last4Digits: string;
	cardholderName: string;
	network: string;
}
export interface PayPalBillingAgreementDetails {
	paypalBillingAgreementId: string;
	externalPayerInfo?: ExternalPayerInfo;
	shippingAddress?: CustomerAddress;
}
export interface GoCardlessDetails {
	gocardlessMandateId: string;
}
export interface IPaymentMethodToken<T, U extends PaymentInstrumentType> {
	token: string;
	analyticsId: string;
	tokenType: TokenType;
	paymentInstrumentData: T;
	paymentInstrumentType: U;
	threeDSecureAuthentication: Nullable<ThreeDSAuthenticationData>;
	vaultData: Nullable<VaultData>;
}
export type BaseAmountChange = {
	totalAmount: number;
};
export type TaxAmountChange = {
	reason: "TAX";
	totalTaxAmount: number;
};
export type AmountChange = BaseAmountChange & TaxAmountChange;
export type PaymentCardToken = IPaymentMethodToken<PaymentCardDetails, PaymentInstrumentType.CARD>;
export type PayPalBillingAgreementToken = IPaymentMethodToken<PayPalBillingAgreementDetails, PaymentInstrumentType.PAYPAL_VAULTED>;
export type GoCardlessToken = IPaymentMethodToken<GoCardlessDetails, PaymentInstrumentType.GO_CARDLESS>;
export type IdealPayToken = IPaymentMethodToken<Record<string, never>, PaymentInstrumentType.PAY_NL_IDEAL>;
export type PaymentMethodToken = PaymentCardToken | PayPalBillingAgreementToken | GoCardlessToken | IdealPayToken | IPaymentMethodToken<any, any>;
export interface ThreeDSVerificationResult<T extends ThreeDSecureStatus> {
	status: T;
	error: Nullable<PrimerClientError>;
	data: PaymentMethodToken;
	resumeToken: string;
}
export type ThreeDSVerification = ThreeDSVerificationResult<ThreeDSecureStatus.SUCCESS> | ThreeDSVerificationResult<ThreeDSecureStatus.FAILED> | ThreeDSVerificationResult<ThreeDSecureStatus.SKIPPED>;
export interface PurchaseInformation {
	totalAmount: MonetaryAmount;
}
export interface VaultInformation {
	totalAmount: {
		currency: Alpha3CurrencyCode;
	};
}
export interface VaultDetails {
	currencyCode: Alpha3CurrencyCode;
}
export type CheckSuccessScreenOptions = {
	type: SuccessScreenType.CHECK;
	title: Label;
};
export type PaymentMethodSuccessScreenOptions = {
	type: SuccessScreenType.PAYMENT_METHOD;
};
export type SuccessScreenOptions = /* No success screen will be displayed */ false | /* Show the default success screen of the payment method*/ undefined | CheckSuccessScreenOptions | PaymentMethodSuccessScreenOptions;
export type SuccessCallbackReturnType = /* Show success screen (for backward compatibility) */ undefined | /* Show success screen */ true | /* Refresh client token and perform new step */ {
	clientToken: string;
};
export type VaultOptions = {
	visible?: boolean;
	deletionDisabled?: boolean;
};
export type TransitionType = "SLIDE_UP" | "SLIDE_DOWN" | "SLIDE_HORIZONTAL";
export type SceneTransitionOptions = {
	type: TransitionType;
	duration: number;
	isRtlLocale?: boolean;
};
export type SceneOptions = {
	onEntering?: (sceneId: string) => void;
	transition?: SceneTransitionOptions | false;
};
export interface BinData {
	network?: string;
	issuerCountryCode?: string;
	issuerName?: string;
	issuerCurrencyCode?: string;
	regionalRestriction?: string;
	accountNumberType?: string;
	accountFundingType?: string;
	prepaidReloadableIndicator?: string;
	productUsageType?: string;
	productCode?: string;
	productName?: string;
}
export type RedirectOptions = {
	returnUrl?: string;
	/**
	 * default: false
	 */
	forceRedirect?: boolean;
};
export type AdvancedOptions = {
	platform?: "STANDALONE" | "MAGENTO";
};
export type PaymentMethodAction = "PAYMENT_METHOD_SELECTED" | "PAYMENT_METHOD_UNSELECTED";
export type PaymentHandling = "AUTO" | "MANUAL";
export type Payment = {
	id: string;
	orderId: string;
	paymentMethodData?: PaymentMethodData;
};
export interface onBeforePaymentCreateHandler {
	continuePaymentCreation: () => void;
	abortPaymentCreation: () => void;
}
export interface OnCheckoutFailHandler {
	showErrorMessage: (errorMessage?: string) => void;
}
export interface PaymentHandlers {
	onBeforePaymentCreate?: (data: {
		paymentMethodType?: PaymentMethodType;
	}, handler: onBeforePaymentCreateHandler) => void;
	onPaymentCreationStart?: () => void;
	onCheckoutComplete?: (data: {
		payment: Payment;
	}) => void;
	onCheckoutFail?: (error: PrimerClientError, data: {
		payment?: Payment;
	}, handler: OnCheckoutFailHandler | undefined) => void;
}
export type OnTokenizeShouldStart = (data: {
	paymentMethodType?: PaymentMethodType;
}) => boolean | Promise<boolean>;
export type OnTokenizeDidNotStart = (reason: string) => void;
export type OnTokenizeStart = () => void;
export type OnTokenizeError = (error: PrimerClientError) => void;
export interface OnTokenizeSuccessHandler {
	handleSuccess(): any;
	handleFailure(errorMessage?: string): any;
	continueWithNewClientToken(clientToken: string): any;
}
export type OnTokenizeSuccess = (data: PaymentMethodToken, handler: OnTokenizeSuccessHandler) => void | Promise<void>;
export interface OnResumeSuccessHandler {
	handleSuccess(): any;
	handleFailure(errorMessage?: string): any;
	continueWithNewClientToken(clientToken: string): any;
}
export type OnResumeSuccess = (data: ResumeToken, handler: OnResumeSuccessHandler) => void;
export type onResumeError = (error: PrimerClientError) => void;
export type OnResumePending = (paymentMethodData: PaymentMethodData) => void;
export interface TokenizationHandlers {
	onTokenizeShouldStart?: OnTokenizeShouldStart;
	onTokenizeDidNotStart?: OnTokenizeDidNotStart;
	onTokenizeStart?: OnTokenizeStart;
	onTokenizeSuccess?: OnTokenizeSuccess;
	onTokenizeError?: OnTokenizeError;
	onResumeSuccess?: OnResumeSuccess;
	onResumePending?: OnResumePending;
	onResumeError?: onResumeError;
}
export interface PaymentMethodHandlers {
	onPaymentMethodAction?: (paymentMethodAction: PaymentMethodAction, { paymentMethodType, }: {
		paymentMethodType: Nullable<PaymentMethodType | string>;
	}) => void;
}
export interface ClientSessionHandlers {
	onClientSessionUpdate?: (clientSession: ClientSession) => void;
	onBeforeClientSessionUpdate?: () => void;
}
export interface SinglePaymentMethodCheckoutOptions extends TokenizationHandlers, PaymentHandlers, ClientSessionHandlers, PaymentMethodHandlers {
	uxFlow: CheckoutUXFlow.SINGLE_PAYMENT_METHOD_CHECKOUT;
	container: string | Element;
	paymentMethod: PaymentMethodType;
	locale?: SupportedLocale;
	style?: CheckoutStyle;
	submitButton?: SubmitButtonOptions;
	processingIndicator?: ProcessingIndicatorOptions;
	errorMessage?: ErrorMessageOptions;
	successScreen?: SuccessScreenOptions;
	form?: FormOptions;
	scene?: SceneOptions;
	vault?: VaultOptions;
	allowedCardNetworks?: CardNetwork[];
	redirect?: RedirectOptions;
	card?: CheckoutCardOptions;
	giftCard?: CustomizablePaymentMethodButton;
	paypal?: Omit<PayPalOptions, "container">;
	googlePay?: Omit<GooglePayOptions, "container">;
	applePay?: Omit<ApplePayOptions, "container">;
	klarna?: KlarnaOptions;
	directDebit?: DirectDebitOptions;
	paymentHandling?: PaymentHandling;
}
export interface VaultManagerOptions {
	container: string | Element;
	locale?: SupportedLocale;
	vaultOnly?: boolean;
	deletionDisabled?: boolean;
	style?: CheckoutStyle;
	scene?: SceneOptions;
	errorMessage?: ErrorMessageOptions;
	form?: FormOptions;
	submitButton?: SubmitButtonOptions;
	processingIndicator?: ProcessingIndicatorOptions;
	allowedCardNetworks?: CardNetwork[];
	card?: CheckoutCardOptions;
	threeDSecure?: ThreeDSVerificationOptions;
	giftCard?: CustomizablePaymentMethodButton;
	directDebit?: DirectDebitOptions;
	paypal?: Omit<PayPalOptions, "container">;
	onTokenizeShouldStart?: OnTokenizeShouldStart;
	onTokenizeDidNotStart?: OnTokenizeDidNotStart;
	onTokenizeStart?: () => void;
	onTokenizeSuccess?: (data: PaymentMethodToken) => void;
	onTokenizeError?: (message: PrimerClientError) => void;
}
export interface UniversalCheckoutOptions extends TokenizationHandlers, PaymentHandlers, PaymentMethodHandlers, ClientSessionHandlers {
	uxFlow?: CheckoutUXFlow.CHECKOUT;
	container: string | Element;
	locale?: SupportedLocale;
	style?: CheckoutStyle;
	scene?: SceneOptions;
	vault?: VaultOptions;
	submitButton?: SubmitButtonOptions;
	processingIndicator?: ProcessingIndicatorOptions;
	errorMessage?: ErrorMessageOptions;
	successScreen?: SuccessScreenOptions;
	form?: FormOptions;
	allowedPaymentMethods?: PaymentMethodType[];
	allowedCardNetworks?: CardNetwork[];
	card?: CheckoutCardOptions;
	redirect?: RedirectOptions;
	paypal?: Omit<PayPalOptions, "container">;
	googlePay?: Omit<GooglePayOptions, "container">;
	applePay?: Omit<ApplePayOptions, "container">;
	klarna?: KlarnaOptions;
	directDebit?: DirectDebitOptions;
	giftCard?: CustomizablePaymentMethodButton;
	paymentHandling?: PaymentHandling;
	advanced?: AdvancedOptions;
}
export interface HeadlessUniversalCheckoutOptions extends TokenizationHandlers, PaymentHandlers, PaymentMethodHandlers, ClientSessionHandlers {
	style?: CheckoutStyle;
	paymentHandling?: PaymentHandling;
	locale?: SupportedLocale;
	allowedCardNetworks?: CardNetwork[];
	card?: CheckoutCardOptions;
	redirect?: RedirectOptions;
	paypal?: Omit<PayPalOptions, "container">;
	googlePay?: Omit<GooglePayOptions, "container">;
	applePay?: Omit<ApplePayOptions, "container">;
	klarna?: KlarnaOptions;
	directDebit?: DirectDebitOptions;
	giftCard?: CustomizablePaymentMethodButton;
	onAvailablePaymentMethodsLoad: (paymentMethods: PaymentMethodInfo[]) => void;
}
export interface PrimerCheckout {
	teardown(): void;
	submit(): void;
	setPaymentCreationEnabled(isEnabled: boolean): void;
	setTokenizationEnabled(isEnabled: boolean): void;
	refreshClientSession(): Promise<boolean>;
	/**
	 * @deprecated The method should not be used
	 */
	setClientToken(): Promise<boolean>;
}
export type EventListener = (event?: Event) => void;
export declare enum EventTypes {
	CHANGE = "change",
	ERROR = "error",
	FOCUS = "focus",
	BLUR = "blur",
	CLICK = "click",
	CLOSE = "close"
}
export interface HeadlessHostedInputOptions {
	placeholder?: string;
	ariaLabel?: string;
	style?: Record<string, any>;
}
export interface IHeadlessHostedInput {
	getOptions(): HeadlessHostedInputOptions;
	setOptions(options: HeadlessHostedInputOptions): void;
	render(container: string, options: HeadlessHostedInputOptions): Promise<void>;
	addEventListener(event: EventTypes, callback: EventListener): void;
	focus(): void;
	blur(): void;
	setDisabled(status: boolean): void;
}
export interface ICardPaymentMethodManager {
	createHostedInputs(): {
		cardNumberInput: IHeadlessHostedInput;
		expiryInput: IHeadlessHostedInput;
		cvvInput: IHeadlessHostedInput;
	};
	setCardholderName(cardholderName: string): void;
	removeHostedInputs(): void;
	submit(): Promise<void>;
	validate(): Promise<Validation>;
	reset(): void;
}
export interface PayPalStyles {
	buttonColor?: "gold" | "blue" | "silver" | "white" | "black";
	buttonShape?: "pill" | "rect";
	buttonSize?: "small" | "medium" | "large" | "responsive";
	buttonHeight?: number;
	buttonLabel?: "checkout" | "credit" | "pay" | "buynow" | "paypal" | "installment";
	buttonTagline?: boolean;
}
export interface GooglePayStyles {
	buttonType?: "long" | "short";
	buttonColor?: "default" | "black" | "white";
}
export interface ApplePayStyles {
	buttonType?: "plain" | "buy" | "set-up" | "donate" | "check-out" | "book" | "subscribe";
	buttonStyle?: "white" | "white-outline" | "black";
}
export interface HeadlessButtonRenderOptions {
	style?: GooglePayStyles | PayPalStyles | ApplePayStyles | Record<string, unknown>;
}
export interface IHeadlessPaymentMethodButton {
	render(containerId: string, options: HeadlessButtonRenderOptions): Promise<void>;
	setDisabled(disabled: boolean): Promise<void>;
	clean(): void;
	focus(): void;
	blur(): void;
	addEventListener(event: EventTypes, callback: EventListener): void;
}
export interface INativePaymentMethodManager {
	createButton(): IHeadlessPaymentMethodButton;
}
export interface IRedirectPaymentMethodManager {
	start(): Promise<void>;
	addEventListener(event: EventTypes, callback: EventListener): void;
}
export type PaymentMethodManagers = ICardPaymentMethodManager | INativePaymentMethodManager | IRedirectPaymentMethodManager;
export declare enum HeadlessManagerType {
	CARD = "CARD",
	NATIVE = "NATIVE",
	REDIRECT = "REDIRECT"
}
export type PaymentMethodInfo = {
	type: PaymentMethodType;
	managerType: HeadlessManagerType;
};
export type ButtonPaymentMethodAsset = {
	backgroundColor: BackgroundColor;
	iconUrl: IconUrl;
	paymentMethodName?: string;
};
export interface IAssetsManager {
	getPaymentMethodAsset(type: PaymentMethodType): Promise<ButtonPaymentMethodAsset | null>;
}
export interface CardPaymentMethodManagerOptions {
	onCardMetadataChange?: (metadata: CardMetadata) => void;
}
export type PaymentMethodManagerOptions = CardPaymentMethodManagerOptions;
export interface PrimerHeadlessCheckout {
	createPaymentMethodManager(type: "PAYMENT_CARD", options?: PaymentMethodManagerOptions): Promise<ICardPaymentMethodManager | null>;
	createPaymentMethodManager(type: PaymentMethodType.PAYPAL | "PAYPAL" | "GOOGLE_PAY" | "APPLE_PAY", options?: PaymentMethodManagerOptions): Promise<INativePaymentMethodManager | null>;
	createPaymentMethodManager(type: PaymentMethodType, options?: PaymentMethodManagerOptions): Promise<IRedirectPaymentMethodManager | null>;
	getAssetsManager(): IAssetsManager;
	configure: (options: HeadlessUniversalCheckoutOptions) => void;
	start: () => void;
}
export interface PrimerSinglePaymentMethodCheckout {
	submit(): void;
	refreshClientSession(): Promise<boolean>;
	/**
	 * @deprecated The method should not be used
	 */
	setClientToken(): Promise<boolean>;
}
export interface PrimerVaultManager {
	teardown(): void;
	submit(): void;
}
export interface VaultListItem {
	id: string;
	type: PaymentInstrumentType;
	details: CardDetails | PayPalDetails;
}
export interface RemotePaymentMethodConfiguration<T> {
	id: string;
	options: T;
}
export declare const Primer: {
	SDK_VERSION: string;
	createHeadless: (clientToken: string) => Promise<PrimerHeadlessCheckout | PrimerVaultManager>;
	showExpressCheckout: (clientToken: string, options: any) => Promise<PrimerHeadlessCheckout | PrimerVaultManager>;
	showUniversalCheckout: (clientToken: string, options: SinglePaymentMethodCheckoutOptions | UniversalCheckoutOptions) => Promise<PrimerHeadlessCheckout | PrimerVaultManager>;
	showVaultManager: (clientToken: string, options: VaultManagerOptions) => Promise<PrimerHeadlessCheckout | PrimerVaultManager>;
};

export {};
