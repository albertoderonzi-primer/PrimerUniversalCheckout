/**
 * This type can be used to create scoped tags for your components.
 *
 * Usage:
 *
 * ```ts
 * import type { ScopedElements } from "path/to/library/jsx-integration";
 *
 * declare module "my-library" {
 *   namespace JSX {
 *     interface IntrinsicElements
 *       extends ScopedElements<'test-', ''> {}
 *   }
 * }
 * ```
 *
 */
export type ScopedElements<Prefix extends string = "", Suffix extends string = ""> = {
  [Key in keyof CustomElements as `${Prefix}${Key}${Suffix}`]: CustomElements[Key];
};

type BaseProps = {
  /** Content added between the opening and closing tags of the element */
  children?: any;
  /** Used for declaratively styling one or more elements using CSS (Cascading Stylesheets) */
  class?: string;
  /** Used for declaratively styling one or more elements using CSS (Cascading Stylesheets) */
  className?: string;
  /** Takes an object where the key is the class name(s) and the value is a boolean expression. When true, the class is applied, and when false, it is removed. */
  classList?: Record<string, boolean | undefined>;
  /** Specifies the text direction of the element. */
  dir?: "ltr" | "rtl";
  /** Contains a space-separated list of the part names of the element that should be exposed on the host element. */
  exportparts?: string;
  /** For <label> and <output>, lets you associate the label with some control. */
  htmlFor?: string;
  /** Specifies whether the element should be hidden. */
  hidden?: boolean | string;
  /** A unique identifier for the element. */
  id?: string;
  /** Keys tell React which array item each component corresponds to */
  key?: string | number;
  /** Specifies the language of the element. */
  lang?: string;
  /** Contains a space-separated list of the part names of the element. Part names allows CSS to select and style specific elements in a shadow tree via the ::part pseudo-element. */
  part?: string;
  /** Use the ref attribute with a variable to assign a DOM element to the variable once the element is rendered. */
  ref?: unknown | ((e: unknown) => void);
  /** Adds a reference for a custom element slot */
  slot?: string;
  /** Prop for setting inline styles */
  style?: Record<string, string | number>;
  /** Overrides the default Tab button behavior. Avoid using values other than -1 and 0. */
  tabIndex?: number;
  /** Specifies the tooltip text for the element. */
  title?: string;
  /** Passing 'no' excludes the element content from being translated. */
  translate?: "yes" | "no";
};

type BaseEvents = {};

export type PrimerCheckoutComponentProps = {
  /**  */
  customStyles?: string;
  /**  */
  clientToken?: string;
  /**  */
  options?: PrimerCheckoutOptions;
  /** Whether the component has completed initialization and loading
This is used to control the CSS-only loader visibility */
  _jsInitialized?: boolean;
  /**  */
  jsInitialized?: boolean;
  /**  */
  defaultSlot?: HTMLSlotElement;
  /**  */
  locale?: LocaleCode | undefined;
  /**  */
  sdkContextController?: SDKContextController;
  /**  */
  sdkStateController?: SdkStateController;
  /**  */
  primerEventsController?: PrimerEventsController;
  /**  */
  styleProcessingController?: StyleProcessingController;
  /**  */
  vaultManagerController?: VaultManagerController;
  /**  */
  cardNetworkController?: CardNetworkController;
  /**  */
  achPaymentEventsController?: AchPaymentEventsController;
};

export type ButtonComponentProps = {
  /**  */
  variant?: "primary" | "secondary" | "tertiary";
  /**  */
  disabled?: boolean;
  /** Loading state of the button
When true, the button will display a spinner and be disabled */
  loading?: boolean;
  /**  */
  type?: "button" | "submit" | "reset";
  /** Selection state of the button
- default: Not checked
- checked: Button is checked */
  selectionState?: ButtonSelectionState;
  /** Indicates if this button is selectable/checkable */
  selectable?: boolean;

  /**  */
  "onselection-change"?: (e: CustomEvent<CustomEvent>) => void;
};

export type PrimerCheckoutStateComponentProps = {
  /**  */
  type?: "complete" | "failure";
  /**  */
  description?: string | undefined;
};

export type CollapsableComponentProps = {
  /** The header text for the collapsable */
  header?: string;
  /** Whether the collapsable is expanded by default */
  expanded?: boolean;
  /** Text for expand button (for accessibility) */
  expandText?: string;
  /** Text for collapse button (for accessibility) */
  collapseText?: string;
  /** ARIA label for the collapsable header */
  ariaLabel?: string;
  /** The button variant to use */
  buttonVariant?: ButtonVariant;

  /**  */
  "onexpanded-changed"?: (e: CustomEvent<CustomEvent>) => void;
};

export type DialogComponentProps = {
  /**  */
  "onprimer-dialog-close"?: (e: CustomEvent<CustomEvent>) => void;
};

export type ErrorMessageComponentProps = {
  /** The error message text to display */
  message?: string;
  /** Whether the error message is visible */
  visible?: boolean;
  /** Accessibility role for the error message
Defaults to "alert" for proper screen reader announcements */
  role?: string;
};

export type PrimerIconComponentProps = {
  /**  */
  color?: string;
  /**  */
  size?: "lg" | "md" | "sm";
  /** The name of the icon to draw - available names can be found under library.ts file */
  name?: IconName | undefined;
};

export type InputComponentProps = {
  /**  */
  value?: string;
  /**  */
  placeholder?: string;
  /**  */
  disabled?: boolean;
  /**  */
  name?: string;
  /**  */
  type?: InputType;
  /**  */
  required?: boolean;
  /**  */
  readonly?: boolean;
  /**  */
  pattern?: string;
  /**  */
  minlength?: number | undefined;
  /**  */
  maxlength?: number | undefined;
  /**  */
  min?: string;
  /**  */
  max?: string;
  /**  */
  step?: string;
  /**  */
  autocomplete?: string;
  /**  */
  id?: string;
  /** Get the validity state of the input element */
  validity?: ValidityState;
  /** Get the validation message of the input element */
  validationMessage?: string;
  /** Fired when the input receives focus */
  onfocus?: (e: CustomEvent<FocusEvent>) => void;
  /** Fired when the input loses focus */
  onblur?: (e: CustomEvent<FocusEvent>) => void;
  /** Fired when the input fails validation */
  oninvalid?: (e: CustomEvent<Event>) => void;
  /** Fired when the input value changes */
  oninput?: (e: CustomEvent<never>) => void;
  /** Fired when the input value is committed */
  onchange?: (e: CustomEvent<never>) => void;
};

export type InputErrorComponentProps = {
  /** ID of the form control this error message is associated with */
  for?: string;
  /** Whether the error is currently active/visible */
  active?: boolean;
};

export type InputLabelComponentProps = {
  /** ID of the form control this label is associated with */
  for?: string;
  /** Whether the label should appear disabled */
  disabled?: boolean;
};

export type InputWrapperComponentProps = {
  /**  */
  focusWithin?: boolean;
  /**  */
  "has-error"?: boolean;

  /**  */
  "onwrapper-click"?: (e: CustomEvent<CustomEvent>) => void;
};

export type PortalComponentProps = {
  /**  */
  id?: string;
  /**  */
  oneventName?: (e: CustomEvent<CustomEvent>) => void;
};

export type SpinnerComponentProps = {
  /** Color of the spinner
Defaults to the design system loader color */
  color?: string;
  /** Size of the spinner
Available values: 'small', 'medium', 'large' or a custom number as string */
  size?: SpinnerSize | string;
  /** Whether to use compact mode (minimal margins)
Useful when embedding in inputs */
  compact?: boolean;
};

export type AchPaymentComponentProps = {
  /**  */
  paymentMethod?: InitializedPaymentMethod | undefined;
  /**  */
  paymentManagers?: InitializedManagersMap;
  /**  */
  sdkState?: SdkStateContext | undefined;
  /**  */
  clientOptions?: ClientOptionsContext | undefined;
  /**  */
  screen?: "form" | "mandate";
  /**  */
  "onprimer-ach-error"?: (e: CustomEvent<CustomEvent>) => void;
  /**  */
  "onprimer-ach-bank-details-collected"?: (e: CustomEvent<CustomEvent>) => void;
  /**  */
  "onprimer-ach-mandate-confirmed"?: (e: CustomEvent<CustomEvent>) => void;
  /**  */
  "onprimer-ach-mandate-declined"?: (e: CustomEvent<CustomEvent>) => void;
};

export type CardFormComponentProps = {
  /**  */
  "hide-labels"?: boolean;
  /** Payment managers injected from context */
  paymentManagers?: InitializedManagersMap;
};

export type DynamicPaymentComponentProps = {
  /**  */
  paymentMethod?: InitializedPaymentMethod | undefined;
  /**  */
  paymentManagers?: InitializedManagersMap;
  /**  */
  sdkState?: SdkStateContext;
  /**  */
  headlessUtils?: HeadlessUnitilsContext;
  /**  */
  open?: boolean;
};

export type ErrorMessageContainerComponentProps = {
  /**  */
  "show-processing-errors"?: boolean;
};

export type PrimerKlarnaComponentProps = {
  /**  */
  paymentManagers?: InitializedManagersMap;
  /**  */
  sdkState?: SdkStateContext;
  /**  */
  headlessUtils?: HeadlessUnitilsContext;
  /**  */
  klarnaCategories?: KlarnaCategoriesContext | null;
};

export type NativePaymentComponentProps = {
  /**  */
  paymentMethod?: InitializedPaymentMethod | undefined;
  /**  */
  paymentManagers?: InitializedManagersMap;
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
};

export type PaymentMethodComponentProps = {
  /**  */
  type?: PaymentMethodType | undefined;
  /**  */
  paymentMethods?: PaymentMethodsContext;
};

export type PrimerCheckoutCompleteComponentProps = {};

export type PrimerCheckoutErrorComponentProps = {
  /**  */
  sdkState?: SdkStateContext;
};

export type PrimerMainComponentProps = {
  /**  */
  paymentMethods?: PaymentMethodsContext;
  /**  */
  sdkState?: SdkStateContext;
};

export type RedirectPaymentComponentProps = {
  /**  */
  paymentMethod?: InitializedPaymentMethod | undefined;
  /**  */
  paymentManagers?: InitializedManagersMap;
  /**  */
  sdkState?: SdkStateContext;
  /**  */
  headlessUtils?: HeadlessUnitilsContext;
};

export type ShowOtherPaymentsComponentProps = {
  /** Consume the vault manager context to interact with vault state */
  vaultManager?: VaultManagerContext;
};

export type VaultManagerComponentProps = {
  /** Animation duration override */
  animationDuration?: number;
  /**  */
  addEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  removeEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  vaultManagerContext?: VaultManagerContext;
};

export type CardFormSubmitComponentProps = {
  /** The button text to display.
Falls back to localized default if not explicitly set. */
  buttonText?: string;
  /**  */
  headlessInstance?: HeadlessUnitilsContext;
  /**  */
  clientOptions?: ClientOptionsContext;
  /**  */
  sdkState?: SdkStateContext;
  /** The button variant to use. */
  variant?: string;
  /** Whether the button is disabled. */
  disabled?: boolean;
};

export type CardNetworkSelectorComponentProps = {
  /** Card networks context from provider */
  cardNetworks?: CardNetworksContext;
  /**  */
  headlessUtils?: HeadlessUnitilsContext;
  /** Dispatched when a network is selected with the network name as detail */
  "onnetwork-selected"?: (e: CustomEvent<CustomEvent>) => void;
};

export type InputCardExpiryComponentProps = {
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
  /** The input label text.
Falls back to localized default if not explicitly set. */
  label?: string;
  /** The input placeholder text.
Falls back to localized default if not explicitly set.
When explicitly set to empty string, no placeholder will be displayed. */
  placeholder?: string;
  /** The input aria-label attribute.
Falls back to localized default if not explicitly set. */
  "aria-label"?: string;
  /**  */
  cardFormContext?: CardFormContext | null;
};

export type InputCardHolderNameComponentProps = {
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
  /** The input label text.
Falls back to localized default if not explicitly set. */
  label?: string;
  /** The input placeholder text.
Falls back to localized default if not explicitly set.
When explicitly set to empty string, no placeholder will be displayed. */
  placeholder?: string;
  /** The input aria-label attribute.
Falls back to localized default if not explicitly set. */
  "aria-label"?: string;
  /**  */
  cardFormContext?: CardFormContext | null;
};

export type InputCardNumberComponentProps = {
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
  /** The input label text.
Falls back to localized default if not explicitly set. */
  label?: string;
  /** The input placeholder text.
Falls back to localized default if not explicitly set.
When explicitly set to empty string, no placeholder will be displayed. */
  placeholder?: string;
  /** The input aria-label attribute.
Falls back to localized default if not explicitly set. */
  "aria-label"?: string;
  /**  */
  cardFormContext?: CardFormContext | null;
};

export type InputCvvComponentProps = {
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
  /** The input label text.
Falls back to localized default if not explicitly set. */
  label?: string;
  /** The input placeholder text.
Falls back to localized default if not explicitly set.
When explicitly set to empty string, no placeholder will be displayed. */
  placeholder?: string;
  /** The input aria-label attribute.
Falls back to localized default if not explicitly set. */
  "aria-label"?: string;
  /**  */
  cardFormContext?: CardFormContext | null;
};

export type VaultCvvInputComponentProps = {
  /**  */
  computedStyles?: CSSStyleDeclaration | null;
  /**  */
  paymentMethod?: PaymentCardVaultedMethod | null;
  /** Form context for checking form dirty state */
  vaultManagerFormContext?: VaultManagerContext;
  /** CVV-specific context for dedicated CVV handling
Separated to minimize re-renders on frequent CVV input changes */
  vaultManagerCvvContext?: VaultItemContext;
};

export type VaultDeleteConfirmationComponentProps = {
  /** Whether a delete operation is in progress */
  isDeleting?: boolean;
  /** The ID of the payment method being deleted */
  paymentMethodId?: string;
  /** Payment method name to display in confirmation */
  paymentMethodName?: string;
  /** Strongly typed event declarations */
  addEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  removeEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /** Consume the vault manager context to access payment method info */
  vaultManager?: VaultManagerContext;
  /**  */
  "onconfirm-delete"?: (e: CustomEvent<CustomEvent>) => void;
  /**  */
  "oncancel-delete"?: (e: CustomEvent<CustomEvent>) => void;
};

export type VaultEmptyStateComponentProps = {};

export type VaultErrorMessageComponentProps = {
  /** The error message to display */
  errorMessage?: string;
  /** Strongly typed event declarations */
  addEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  removeEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  "onclose-error"?: (e: CustomEvent<CustomEvent>) => void;
};

export type VaultManagerHeaderComponentProps = {
  /** Whether we're in edit mode */
  isEditMode?: boolean;
  /** Whether we have payment methods to edit */
  hasPaymentMethods?: boolean;
  /** Strongly typed event declarations */
  addEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  removeEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  "ontoggle-edit-mode"?: (e: CustomEvent<CustomEvent>) => void;
};

export type VaultPaymentMethodItemComponentProps = {
  /**  */
  headlessUtils?: HeadlessUnitilsContext;
  /** Whether the component is in edit mode */
  isEditMode?: boolean;
  /** Strongly typed event declarations */
  addEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /**  */
  removeEventListener?: <K extends keyof VaultManagerEventMap>(
    type: K,
    listener: (ev: VaultManagerEventMap[K]) => void,
    options?: boolean | AddEventListenerOptions,
  ) => void;
  /** Consume the vault manager context */
  vaultManagerContext?: VaultManagerContext;
  /**  */
  vaultItemContext?: VaultItemContext;
  /** The payment method to display */
  paymentMethod?: VaultedPaymentMethod | null;
  /**  */
  "ondelete-payment-method"?: (e: CustomEvent<CustomEvent>) => void;
};

export type VaultPaymentSubmitComponentProps = {
  /** The button text to display.
Falls back to localized default if not explicitly set. */
  buttonText?: string;
  /**  */
  headlessInstance?: HeadlessUnitilsContext;
  /**  */
  sdkState?: SdkStateContext;
  /** The button variant to use. */
  variant?: string;
  /** Whether the button is disabled.
This property allows external disabling of the button
regardless of the context state. */
  disabled?: boolean;
  /**  */
  vaultItemContext?: VaultItemContext;
  /**  */
  vaultManager?: VaultManagerContext;
  /**  */
  clientOptions?: PrimerCheckoutOptions | null;
};

export type CustomElements = {
  /**
   * PrimerCheckoutComponent implements the main checkout experience.
   * This component includes a CSS-only loader that displays before the JavaScript
   * is fully loaded, ensuring users see a loading indicator immediately.
   *
   * The loader can be disabled by:
   * 1. Adding the 'loader-disabled' attribute to the component
   * 2. Setting the CSS custom property --primer-loader-disabled: 1
   * ---
   *
   */
  "primer-checkout": Partial<PrimerCheckoutComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Events:**
   *  - **selection-change**
   */
  "primer-button": Partial<ButtonComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-checkout-state": Partial<PrimerCheckoutStateComponentProps & BaseProps & BaseEvents>;

  /**
   * A collapsable component that smoothly expands and collapses content.
   * Uses CSS Grid for smooth animation and incorporates the primary button.
   * ---
   *
   *
   * ### **Events:**
   *  - **expanded-changed**
   *
   * ### **Methods:**
   *  - **expand(): _void_** - Expand the collapsable programmatically
   * - **collapse(): _void_** - Collapse the collapsable programmatically
   */
  "primer-collapsable": Partial<CollapsableComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Events:**
   *  - **primer-dialog-close**
   */
  "primer-dialog": Partial<DialogComponentProps & BaseProps & BaseEvents>;

  /**
   * A reusable atomic error message component that displays error information
   * with appropriate styling and accessibility attributes.
   *
   * This component is fully accessible and designed to work with screen readers.
   * It includes animations for visibility transitions.
   * ---
   *
   *
   * ### **CSS Parts:**
   *  - **error-message** - The main error message container
   * - **error-icon** - The error icon container
   * - **error-content** - The error text content
   */
  "primer-error-message": Partial<ErrorMessageComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-icon": Partial<PrimerIconComponentProps & BaseProps & BaseEvents>;

  /**
   * A fully type-safe input component that wraps the native HTML input element
   * while providing additional functionality and styling.
   * ---
   *
   *
   * ### **Events:**
   *  - **focus** - Fired when the input receives focus
   * - **blur** - Fired when the input loses focus
   * - **invalid** - Fired when the input fails validation
   * - **input** - Fired when the input value changes
   * - **change** - Fired when the input value is committed
   *
   * ### **Methods:**
   *  - **focus(options: _FocusOptions_): _void_** - Focus the input element
   * - **blur(): _void_** - Remove focus from the input element
   * - **select(): _void_** - Select all text in the input element
   * - **setSelectionRange(start: _number_, end: _number_, direction: _'forward' | 'backward' | 'none'_): _void_** - Set the selection range of the input element
   * - **checkValidity(): _boolean_** - Check if the input element is valid
   * - **reportValidity(): _boolean_** - Report the validity of the input element
   * - **addEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | AddEventListenerOptions_): _void_** - Type safe event dispatcher - allows consumers to use proper types
   * when listening to events from this component
   * - **removeEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | EventListenerOptions_): _void_** - Type safe event dispatcher removal
   *
   * ### **CSS Parts:**
   *  - **input** - The native input element
   */
  "primer-input": Partial<InputComponentProps & BaseProps & BaseEvents>;

  /**
   * Input error component for displaying form validation messages
   * ---
   *
   *
   * ### **Slots:**
   *  - _default_ - Default slot for error message content
   */
  "primer-input-error": Partial<InputErrorComponentProps & BaseProps & BaseEvents>;

  /**
   * Input label component for form elements
   * ---
   *
   *
   * ### **Slots:**
   *  - _default_ - Default slot for label text content
   */
  "primer-input-label": Partial<InputLabelComponentProps & BaseProps & BaseEvents>;

  /**
   * A wrapper component for input elements that handles focus styling and interactions.
   * Provides an improved user experience by making the entire wrapper clickable to focus the inner input.
   *
   * Features:
   * - Automatically focuses primer-input elements when wrapper is clicked
   * - Dispatches wrapper-click events for iframe-based hosted inputs
   * - Sets proper cursor styling to indicate text input functionality
   * ---
   *
   *
   * ### **Events:**
   *  - **wrapper-click**
   */
  "primer-input-wrapper": Partial<InputWrapperComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Events:**
   *  - **eventName**
   */
  "primer-portal": Partial<PortalComponentProps & BaseProps & BaseEvents>;

  /**
   * Spinner component with configurable size and color
   * Adapted to work both standalone and within input components
   * ---
   *
   */
  "primer-spinner": Partial<SpinnerComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Events:**
   *  - **primer-ach-error**
   * - **primer-ach-bank-details-collected**
   * - **primer-ach-mandate-confirmed**
   * - **primer-ach-mandate-declined**
   */
  "primer-ach-payment": Partial<AchPaymentComponentProps & BaseProps & BaseEvents>;

  /**
   * CardFormComponent serves as a container for card input components.
   * It handles form submission, validation, and provides context to child components.
   * ---
   *
   */
  "primer-card-form": Partial<CardFormComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-dynamic-payment": Partial<DynamicPaymentComponentProps & BaseProps & BaseEvents>;

  /**
   * A container component that connects to the SDK state context
   * and displays appropriate error messages based on error state.
   *
   * This component handles both process errors (typically from backend)
   * and validation errors (typically from client-side), managing when
   * and how they are displayed based on the current SDK state.
   * ---
   *
   */
  "primer-error-message-container": Partial<ErrorMessageContainerComponentProps & BaseProps & BaseEvents>;

  /**
   * This component renders Klarna payment method in a card-like (accordion) container with
   * payment categories options to choose from.
   *
   * [ Pay with Klarna    v ] --> accordion header
   *
   * [ Pay Now ] [ Buy now, pay later ] --> payment categories options from Klarna
   * [ Continue with Klarna ] --> opens a Klarna popup
   * ---
   *
   */
  "primer-klarna": Partial<PrimerKlarnaComponentProps & BaseProps & BaseEvents>;

  /**
   * Component for rendering native payment buttons (Apple Pay, Google Pay, PayPal)
   * with proper height calculations based on design system variables.
   * ---
   *
   */
  "primer-native-payment": Partial<NativePaymentComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-payment-method": Partial<PaymentMethodComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-checkout-complete": Partial<PrimerCheckoutCompleteComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-checkout-error": Partial<PrimerCheckoutErrorComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-main": Partial<PrimerMainComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   */
  "primer-redirect-payment": Partial<RedirectPaymentComponentProps & BaseProps & BaseEvents>;

  /**
   * Component for showing/hiding other payment methods when vault is present
   * Utilizes the collapsable component for smooth transitions
   * ---
   *
   */
  "primer-show-other-payments": Partial<ShowOtherPaymentsComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultManagerComponent - displays and manages saved payment methods
   * ---
   *
   */
  "primer-vault-manager": Partial<VaultManagerComponentProps & BaseProps & BaseEvents>;

  /**
   * A form submit button component for card forms.
   * Provides a consistent submit button with translation support.
   * ---
   *
   */
  "primer-card-form-submit": Partial<CardFormSubmitComponentProps & BaseProps & BaseEvents>;

  /**
   * Component for displaying and selecting card networks
   * Uses context directly rather than properties
   * ---
   *
   *
   * ### **Events:**
   *  - **network-selected** - Dispatched when a network is selected with the network name as detail
   */
  "primer-card-network-selector": Partial<CardNetworkSelectorComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Methods:**
   *
   * - **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched
   *
   * Can be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`
   * uses the same logic to compute the error code
   *
   */
  "primer-input-card-expiry": Partial<InputCardExpiryComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Methods:**
   *
   * - **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched
   *
   * Can be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`
   * uses the same logic to compute the error code
   *
   */
  "primer-input-card-holder-name": Partial<InputCardHolderNameComponentProps & BaseProps & BaseEvents>;

  /**
   * Card number input component with dynamic card network detection and selection
   * ---
   *
   *
   * ### **Methods:**
   *
   *
   * - **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched
   *
   * Can be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`
   * uses the same logic to compute the error code
   */
  "primer-input-card-number": Partial<InputCardNumberComponentProps & BaseProps & BaseEvents>;

  /**
   *
   * ---
   *
   *
   * ### **Methods:**
   *
   * - **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched
   *
   * Can be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`
   * uses the same logic to compute the error code
   *
   */
  "primer-input-cvv": Partial<InputCvvComponentProps & BaseProps & BaseEvents>;

  /**
   * CVV Input component for vault payment methods
   * Renders a secure iframe for CVV input when required by the selected payment method
   * Uses dedicated CVV context to minimize re-renders
   * ---
   *
   *
   * ### **Methods:**
   *  - **onCvvInputChange()** - Update CVV metadata in the context when input changes
   */
  "primer-vault-cvv-input": Partial<VaultCvvInputComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultDeleteConfirmationComponent - displays confirmation UI for deleting a payment method
   * ---
   *
   *
   * ### **Events:**
   *  - **confirm-delete**
   * - **cancel-delete**
   */
  "primer-vault-delete-confirmation": Partial<VaultDeleteConfirmationComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultEmptyStateComponent - displays when no payment methods are available
   * ---
   *
   */
  "primer-vault-empty-state": Partial<VaultEmptyStateComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultErrorMessageComponent - displays error messages with improved visuals
   * ---
   *
   *
   * ### **Events:**
   *  - **close-error**
   */
  "primer-vault-error-message": Partial<VaultErrorMessageComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultManagerHeaderComponent - displays the header for the vault manager
   * ---
   *
   *
   * ### **Events:**
   *  - **toggle-edit-mode**
   */
  "primer-vault-manager-header": Partial<VaultManagerHeaderComponentProps & BaseProps & BaseEvents>;

  /**
   * VaultPaymentMethodItemComponent - displays a single payment method
   * Uses the VaultManagerController for display formatting
   * Now supports selection via the simplified button checked state
   * Enhanced with smooth transitions between edit and payment modes
   * Always renders the primer-button for consistent UI and improved accessibility
   * ---
   *
   *
   * ### **Events:**
   *  - **delete-payment-method**
   */
  "primer-vault-payment-method-item": Partial<VaultPaymentMethodItemComponentProps & BaseProps & BaseEvents>;

  /**
   * A submit button component for vault payment flows.
   * Provides a consistent submit button with translation support.
   * Integrates with the vault manager context to handle payment submission.
   * ---
   *
   */
  "primer-vault-payment-submit": Partial<VaultPaymentSubmitComponentProps & BaseProps & BaseEvents>;
};
