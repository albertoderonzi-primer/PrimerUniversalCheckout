{
  "$schema": "https://raw.githubusercontent.com/microsoft/vscode-html-languageservice/main/docs/customData.schema.json",
  "version": 1.1,
  "tags": [
    {
      "name": "primer-checkout",
      "description": "PrimerCheckoutComponent implements the main checkout experience.\nThis component includes a CSS-only loader that displays before the JavaScript\nis fully loaded, ensuring users see a loading indicator immediately.\n\nThe loader can be disabled by:\n1. Adding the 'loader-disabled' attribute to the component\n2. Setting the CSS custom property --primer-loader-disabled: 1\n---\n",
      "attributes": [
        { "name": "customStyles", "values": [] },
        { "name": "clientToken", "values": [] },
        { "name": "options", "values": [{ "name": "PrimerCheckoutOptions" }] },
        {
          "name": "_jsInitialized",
          "description": "Whether the component has completed initialization and loading\nThis is used to control the CSS-only loader visibility",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-button",
      "description": "\n---\n\n\n### **Events:**\n - **selection-change**",
      "attributes": [
        {
          "name": "variant",
          "values": [
            { "name": "" },
            { "name": "primary" },
            { "name": "secondary" },
            { "name": "tertiary" }
          ]
        },
        { "name": "disabled", "values": [] },
        {
          "name": "loading",
          "description": "Loading state of the button\nWhen true, the button will display a spinner and be disabled",
          "values": []
        },
        {
          "name": "type",
          "values": [
            { "name": "" },
            { "name": "button" },
            { "name": "submit" },
            { "name": "reset" }
          ]
        },
        {
          "name": "selectionState",
          "description": "Selection state of the button\n- default: Not checked\n- checked: Button is checked",
          "values": [{ "name": "ButtonSelectionState" }]
        },
        {
          "name": "selectable",
          "description": "Indicates if this button is selectable/checkable",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-checkout-state",
      "description": "\n---\n",
      "attributes": [
        {
          "name": "type",
          "values": [{ "name": "complete" }, { "name": "failure" }]
        },
        { "name": "description", "values": [] }
      ],
      "references": []
    },
    {
      "name": "primer-collapsable",
      "description": "A collapsable component that smoothly expands and collapses content.\nUses CSS Grid for smooth animation and incorporates the primary button.\n---\n\n\n### **Events:**\n - **expanded-changed**\n\n### **Methods:**\n - **expand(): _void_** - Expand the collapsable programmatically\n- **collapse(): _void_** - Collapse the collapsable programmatically",
      "attributes": [
        {
          "name": "header",
          "description": "The header text for the collapsable",
          "values": []
        },
        {
          "name": "expanded",
          "description": "Whether the collapsable is expanded by default",
          "values": []
        },
        {
          "name": "expandText",
          "description": "Text for expand button (for accessibility)",
          "values": []
        },
        {
          "name": "collapseText",
          "description": "Text for collapse button (for accessibility)",
          "values": []
        },
        {
          "name": "ariaLabel",
          "description": "ARIA label for the collapsable header",
          "values": []
        },
        {
          "name": "buttonVariant",
          "description": "The button variant to use",
          "values": [{ "name": "ButtonVariant" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-dialog",
      "description": "\n---\n\n\n### **Events:**\n - **primer-dialog-close**",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-error-message",
      "description": "A reusable atomic error message component that displays error information\nwith appropriate styling and accessibility attributes.\n\nThis component is fully accessible and designed to work with screen readers.\nIt includes animations for visibility transitions.\n---\n\n\n### **CSS Parts:**\n - **error-message** - The main error message container\n- **error-icon** - The error icon container\n- **error-content** - The error text content",
      "attributes": [
        {
          "name": "message",
          "description": "The error message text to display",
          "values": []
        },
        {
          "name": "visible",
          "description": "Whether the error message is visible",
          "values": []
        },
        {
          "name": "role",
          "description": "Accessibility role for the error message\nDefaults to \"alert\" for proper screen reader announcements",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-icon",
      "description": "\n---\n",
      "attributes": [
        { "name": "color", "values": [] },
        {
          "name": "size",
          "values": [{ "name": "lg" }, { "name": "md" }, { "name": "sm" }]
        },
        {
          "name": "name",
          "description": "The name of the icon to draw - available names can be found under library.ts file",
          "values": [{ "name": "IconName" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-input",
      "description": "A fully type-safe input component that wraps the native HTML input element\nwhile providing additional functionality and styling.\n---\n\n\n### **Events:**\n - **focus** - Fired when the input receives focus\n- **blur** - Fired when the input loses focus\n- **invalid** - Fired when the input fails validation\n- **input** - Fired when the input value changes\n- **change** - Fired when the input value is committed\n\n### **Methods:**\n - **focus(options: _FocusOptions_): _void_** - Focus the input element\n- **blur(): _void_** - Remove focus from the input element\n- **select(): _void_** - Select all text in the input element\n- **setSelectionRange(start: _number_, end: _number_, direction: _'forward' | 'backward' | 'none'_): _void_** - Set the selection range of the input element\n- **checkValidity(): _boolean_** - Check if the input element is valid\n- **reportValidity(): _boolean_** - Report the validity of the input element\n- **addEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | AddEventListenerOptions_): _void_** - Type safe event dispatcher - allows consumers to use proper types\nwhen listening to events from this component\n- **removeEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | EventListenerOptions_): _void_** - Type safe event dispatcher removal\n\n### **CSS Parts:**\n - **input** - The native input element",
      "attributes": [
        { "name": "value", "values": [] },
        { "name": "placeholder", "values": [] },
        { "name": "disabled", "values": [] },
        { "name": "name", "values": [] },
        { "name": "type", "values": [{ "name": "InputType" }] },
        { "name": "required", "values": [] },
        { "name": "readonly", "values": [] },
        { "name": "pattern", "values": [] },
        { "name": "minlength", "values": [] },
        { "name": "maxlength", "values": [] },
        { "name": "min", "values": [] },
        { "name": "max", "values": [] },
        { "name": "step", "values": [] },
        { "name": "autocomplete", "values": [] },
        { "name": "id", "values": [] }
      ],
      "references": []
    },
    {
      "name": "primer-input-error",
      "description": "Input error component for displaying form validation messages\n---\n\n\n### **Slots:**\n - _default_ - Default slot for error message content",
      "attributes": [
        {
          "name": "for",
          "description": "ID of the form control this error message is associated with",
          "values": []
        },
        {
          "name": "active",
          "description": "Whether the error is currently active/visible",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-input-label",
      "description": "Input label component for form elements\n---\n\n\n### **Slots:**\n - _default_ - Default slot for label text content",
      "attributes": [
        {
          "name": "for",
          "description": "ID of the form control this label is associated with",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Whether the label should appear disabled",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-input-wrapper",
      "description": "A wrapper component for input elements that handles focus styling and interactions.\nProvides an improved user experience by making the entire wrapper clickable to focus the inner input.\n\nFeatures:\n- Automatically focuses primer-input elements when wrapper is clicked\n- Dispatches wrapper-click events for iframe-based hosted inputs\n- Sets proper cursor styling to indicate text input functionality\n---\n\n\n### **Events:**\n - **wrapper-click**",
      "attributes": [
        { "name": "focusWithin", "values": [] },
        { "name": "has-error", "values": [] }
      ],
      "references": []
    },
    {
      "name": "primer-portal",
      "description": "\n---\n\n\n### **Events:**\n - **eventName**",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-spinner",
      "description": "Spinner component with configurable size and color\nAdapted to work both standalone and within input components\n---\n",
      "attributes": [
        {
          "name": "color",
          "description": "Color of the spinner\nDefaults to the design system loader color",
          "values": []
        },
        {
          "name": "size",
          "description": "Size of the spinner\nAvailable values: 'small', 'medium', 'large' or a custom number as string",
          "values": [{ "name": "SpinnerSize" }]
        },
        {
          "name": "compact",
          "description": "Whether to use compact mode (minimal margins)\nUseful when embedding in inputs",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-ach-payment",
      "description": "\n---\n\n\n### **Events:**\n - **primer-ach-error**\n- **primer-ach-bank-details-collected**\n- **primer-ach-mandate-confirmed**\n- **primer-ach-mandate-declined**",
      "attributes": [
        {
          "name": "paymentMethod",
          "values": [{ "name": "InitializedPaymentMethod" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-card-form",
      "description": "CardFormComponent serves as a container for card input components.\nIt handles form submission, validation, and provides context to child components.\n---\n",
      "attributes": [
        { "name": "hide-labels", "values": [] },
        {
          "name": "paymentManagers",
          "description": "Payment managers injected from context",
          "values": [{ "name": "InitializedManagersMap" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-dynamic-payment",
      "description": "\n---\n",
      "attributes": [
        {
          "name": "paymentMethod",
          "values": [{ "name": "InitializedPaymentMethod" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-error-message-container",
      "description": "A container component that connects to the SDK state context\nand displays appropriate error messages based on error state.\n\nThis component handles both process errors (typically from backend)\nand validation errors (typically from client-side), managing when\nand how they are displayed based on the current SDK state.\n---\n",
      "attributes": [{ "name": "show-processing-errors", "values": [] }],
      "references": []
    },
    {
      "name": "primer-klarna",
      "description": "This component renders Klarna payment method in a card-like (accordion) container with\npayment categories options to choose from.\n\n[ Pay with Klarna    v ] --> accordion header\n\n[ Pay Now ] [ Buy now, pay later ] --> payment categories options from Klarna\n[ Continue with Klarna ] --> opens a Klarna popup\n---\n",
      "attributes": [
        {
          "name": "paymentManagers",
          "values": [{ "name": "InitializedManagersMap" }]
        },
        { "name": "sdkState", "values": [{ "name": "SdkStateContext" }] },
        {
          "name": "headlessUtils",
          "values": [{ "name": "HeadlessUnitilsContext" }]
        },
        {
          "name": "klarnaCategories",
          "values": [{ "name": "KlarnaCategoriesContext" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-native-payment",
      "description": "Component for rendering native payment buttons (Apple Pay, Google Pay, PayPal)\nwith proper height calculations based on design system variables.\n---\n",
      "attributes": [
        {
          "name": "paymentMethod",
          "values": [{ "name": "InitializedPaymentMethod" }]
        },
        {
          "name": "paymentManagers",
          "values": [{ "name": "InitializedManagersMap" }]
        },
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-payment-method",
      "description": "\n---\n",
      "attributes": [
        { "name": "type", "values": [{ "name": "PaymentMethodType" }] },
        {
          "name": "paymentMethods",
          "values": [{ "name": "PaymentMethodsContext" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-checkout-complete",
      "description": "\n---\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-checkout-error",
      "description": "\n---\n",
      "attributes": [
        { "name": "sdkState", "values": [{ "name": "SdkStateContext" }] }
      ],
      "references": []
    },
    {
      "name": "primer-main",
      "description": "\n---\n",
      "attributes": [
        {
          "name": "paymentMethods",
          "values": [{ "name": "PaymentMethodsContext" }]
        },
        { "name": "sdkState", "values": [{ "name": "SdkStateContext" }] }
      ],
      "references": []
    },
    {
      "name": "primer-redirect-payment",
      "description": "\n---\n",
      "attributes": [
        {
          "name": "paymentMethod",
          "values": [{ "name": "InitializedPaymentMethod" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-show-other-payments",
      "description": "Component for showing/hiding other payment methods when vault is present\nUtilizes the collapsable component for smooth transitions\n---\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-vault-manager",
      "description": "VaultManagerComponent - displays and manages saved payment methods\n---\n",
      "attributes": [
        {
          "name": "animationDuration",
          "description": "Animation duration override",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-card-form-submit",
      "description": "A form submit button component for card forms.\nProvides a consistent submit button with translation support.\n---\n",
      "attributes": [
        {
          "name": "buttonText",
          "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "headlessInstance",
          "values": [{ "name": "HeadlessUnitilsContext" }]
        },
        {
          "name": "clientOptions",
          "values": [{ "name": "ClientOptionsContext" }]
        },
        { "name": "sdkState", "values": [{ "name": "SdkStateContext" }] },
        {
          "name": "variant",
          "description": "The button variant to use.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Whether the button is disabled.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-card-network-selector",
      "description": "Component for displaying and selecting card networks\nUses context directly rather than properties\n---\n\n\n### **Events:**\n - **network-selected** - Dispatched when a network is selected with the network name as detail",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-input-card-expiry",
      "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
      "attributes": [
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        },
        {
          "name": "label",
          "description": "The input label text.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
          "values": []
        },
        {
          "name": "aria-label",
          "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-input-card-holder-name",
      "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
      "attributes": [
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        },
        {
          "name": "label",
          "description": "The input label text.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
          "values": []
        },
        {
          "name": "aria-label",
          "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-input-card-number",
      "description": "Card number input component with dynamic card network detection and selection\n---\n\n\n### **Methods:**\n \n\n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code",
      "attributes": [
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        },
        {
          "name": "label",
          "description": "The input label text.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
          "values": []
        },
        {
          "name": "aria-label",
          "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-input-cvv",
      "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
      "attributes": [
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        },
        {
          "name": "label",
          "description": "The input label text.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
          "values": []
        },
        {
          "name": "aria-label",
          "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-cvv-input",
      "description": "CVV Input component for vault payment methods\nRenders a secure iframe for CVV input when required by the selected payment method\nUses dedicated CVV context to minimize re-renders\n---\n\n\n### **Methods:**\n - **onCvvInputChange()** - Update CVV metadata in the context when input changes",
      "attributes": [
        {
          "name": "computedStyles",
          "values": [{ "name": "CSSStyleDeclaration" }]
        },
        {
          "name": "paymentMethod",
          "values": [{ "name": "PaymentCardVaultedMethod" }]
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-delete-confirmation",
      "description": "VaultDeleteConfirmationComponent - displays confirmation UI for deleting a payment method\n---\n\n\n### **Events:**\n - **confirm-delete**\n- **cancel-delete**",
      "attributes": [
        {
          "name": "isDeleting",
          "description": "Whether a delete operation is in progress",
          "values": []
        },
        {
          "name": "paymentMethodId",
          "description": "The ID of the payment method being deleted",
          "values": []
        },
        {
          "name": "paymentMethodName",
          "description": "Payment method name to display in confirmation",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-empty-state",
      "description": "VaultEmptyStateComponent - displays when no payment methods are available\n---\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "primer-vault-error-message",
      "description": "VaultErrorMessageComponent - displays error messages with improved visuals\n---\n\n\n### **Events:**\n - **close-error**",
      "attributes": [
        {
          "name": "errorMessage",
          "description": "The error message to display",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-manager-header",
      "description": "VaultManagerHeaderComponent - displays the header for the vault manager\n---\n\n\n### **Events:**\n - **toggle-edit-mode**",
      "attributes": [
        {
          "name": "isEditMode",
          "description": "Whether we're in edit mode",
          "values": []
        },
        {
          "name": "hasPaymentMethods",
          "description": "Whether we have payment methods to edit",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-payment-method-item",
      "description": "VaultPaymentMethodItemComponent - displays a single payment method\nUses the VaultManagerController for display formatting\nNow supports selection via the simplified button checked state\nEnhanced with smooth transitions between edit and payment modes\nAlways renders the primer-button for consistent UI and improved accessibility\n---\n\n\n### **Events:**\n - **delete-payment-method**",
      "attributes": [
        {
          "name": "headlessUtils",
          "values": [{ "name": "HeadlessUnitilsContext" }]
        },
        {
          "name": "isEditMode",
          "description": "Whether the component is in edit mode",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "primer-vault-payment-submit",
      "description": "A submit button component for vault payment flows.\nProvides a consistent submit button with translation support.\nIntegrates with the vault manager context to handle payment submission.\n---\n",
      "attributes": [
        {
          "name": "buttonText",
          "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
          "values": []
        },
        {
          "name": "headlessInstance",
          "values": [{ "name": "HeadlessUnitilsContext" }]
        },
        { "name": "sdkState", "values": [{ "name": "SdkStateContext" }] },
        {
          "name": "variant",
          "description": "The button variant to use.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Whether the button is disabled.\nThis property allows external disabling of the button\nregardless of the context state.",
          "values": []
        }
      ],
      "references": []
    }
  ]
}
