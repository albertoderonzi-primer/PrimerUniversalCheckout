{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "@primer-io/primer-js",
  "version": "0.1.9",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "primer-checkout",
          "description": "PrimerCheckoutComponent implements the main checkout experience.\nThis component includes a CSS-only loader that displays before the JavaScript\nis fully loaded, ensuring users see a loading indicator immediately.\n\nThe loader can be disabled by:\n1. Adding the 'loader-disabled' attribute to the component\n2. Setting the CSS custom property --primer-loader-disabled: 1\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "customStyles",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "clientToken",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "options",
              "value": { "type": "PrimerCheckoutOptions", "default": "{}" }
            },
            {
              "name": "_jsInitialized",
              "description": "Whether the component has completed initialization and loading\nThis is used to control the CSS-only loader visibility",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "jsInitialized", "type": "boolean" },
              { "name": "customStyles", "type": "string" },
              { "name": "clientToken", "type": "string" },
              { "name": "options", "type": "PrimerCheckoutOptions" },
              { "name": "defaultSlot", "type": "HTMLSlotElement" },
              { "name": "locale", "type": "LocaleCode | undefined" },
              {
                "name": "sdkContextController",
                "type": "SDKContextController"
              },
              { "name": "sdkStateController", "type": "SdkStateController" },
              {
                "name": "primerEventsController",
                "type": "PrimerEventsController"
              },
              {
                "name": "styleProcessingController",
                "type": "StyleProcessingController"
              },
              {
                "name": "vaultManagerController",
                "type": "VaultManagerController"
              },
              {
                "name": "cardNetworkController",
                "type": "CardNetworkController"
              },
              {
                "name": "achPaymentEventsController",
                "type": "AchPaymentEventsController"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-button",
          "description": "\n---\n\n\n### **Events:**\n - **selection-change**",
          "doc-url": "",
          "attributes": [
            {
              "name": "variant",
              "value": {
                "type": "| 'primary'\n    | 'secondary'\n    | 'tertiary'",
                "default": "'primary'"
              }
            },
            {
              "name": "disabled",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "loading",
              "description": "Loading state of the button\nWhen true, the button will display a spinner and be disabled",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "type",
              "value": {
                "type": "| 'button'\n    | 'submit'\n    | 'reset'",
                "default": "'button'"
              }
            },
            {
              "name": "selectionState",
              "description": "Selection state of the button\n- default: Not checked\n- checked: Button is checked",
              "value": {
                "type": "ButtonSelectionState",
                "default": "'default'"
              }
            },
            {
              "name": "selectable",
              "description": "Indicates if this button is selectable/checkable",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [{ "name": "selection-change", "type": "CustomEvent" }],
          "js": {
            "properties": [
              {
                "name": "variant",
                "type": "| 'primary'\n    | 'secondary'\n    | 'tertiary'"
              },
              { "name": "disabled", "type": "boolean" },
              {
                "name": "loading",
                "description": "Loading state of the button\nWhen true, the button will display a spinner and be disabled",
                "type": "boolean"
              },
              {
                "name": "buttonType",
                "type": "| 'button'\n    | 'submit'\n    | 'reset'"
              },
              {
                "name": "selectionState",
                "description": "Selection state of the button\n- default: Not checked\n- checked: Button is checked",
                "type": "ButtonSelectionState"
              },
              {
                "name": "selectable",
                "description": "Indicates if this button is selectable/checkable",
                "type": "boolean"
              }
            ],
            "events": [{ "name": "selection-change", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-checkout-state",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "type",
              "value": {
                "type": "'complete' | 'failure'",
                "default": "'complete'"
              }
            },
            { "name": "description", "value": { "type": "string | undefined" } }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "type", "type": "'complete' | 'failure'" },
              { "name": "description", "type": "string | undefined" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-collapsable",
          "description": "A collapsable component that smoothly expands and collapses content.\nUses CSS Grid for smooth animation and incorporates the primary button.\n---\n\n\n### **Events:**\n - **expanded-changed**\n\n### **Methods:**\n - **expand(): _void_** - Expand the collapsable programmatically\n- **collapse(): _void_** - Collapse the collapsable programmatically",
          "doc-url": "",
          "attributes": [
            {
              "name": "header",
              "description": "The header text for the collapsable",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "expanded",
              "description": "Whether the collapsable is expanded by default",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "expandText",
              "description": "Text for expand button (for accessibility)",
              "value": { "type": "string", "default": "'Expand'" }
            },
            {
              "name": "collapseText",
              "description": "Text for collapse button (for accessibility)",
              "value": { "type": "string", "default": "'Collapse'" }
            },
            {
              "name": "ariaLabel",
              "description": "ARIA label for the collapsable header",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "buttonVariant",
              "description": "The button variant to use",
              "value": { "type": "ButtonVariant", "default": "'primary'" }
            }
          ],
          "events": [{ "name": "expanded-changed", "type": "CustomEvent" }],
          "js": {
            "properties": [
              {
                "name": "header",
                "description": "The header text for the collapsable",
                "type": "string"
              },
              {
                "name": "expanded",
                "description": "Whether the collapsable is expanded by default",
                "type": "boolean"
              },
              {
                "name": "expandText",
                "description": "Text for expand button (for accessibility)",
                "type": "string"
              },
              {
                "name": "collapseText",
                "description": "Text for collapse button (for accessibility)",
                "type": "string"
              },
              {
                "name": "ariaLabel",
                "description": "ARIA label for the collapsable header",
                "type": "string"
              },
              {
                "name": "buttonVariant",
                "description": "The button variant to use",
                "type": "ButtonVariant"
              }
            ],
            "events": [{ "name": "expanded-changed", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-dialog",
          "description": "\n---\n\n\n### **Events:**\n - **primer-dialog-close**",
          "doc-url": "",
          "attributes": [],
          "events": [{ "name": "primer-dialog-close", "type": "CustomEvent" }],
          "js": {
            "properties": [],
            "events": [{ "name": "primer-dialog-close", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-error-message",
          "description": "A reusable atomic error message component that displays error information\nwith appropriate styling and accessibility attributes.\n\nThis component is fully accessible and designed to work with screen readers.\nIt includes animations for visibility transitions.\n---\n\n\n### **CSS Parts:**\n - **error-message** - The main error message container\n- **error-icon** - The error icon container\n- **error-content** - The error text content",
          "doc-url": "",
          "attributes": [
            {
              "name": "message",
              "description": "The error message text to display",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "visible",
              "description": "Whether the error message is visible",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "role",
              "description": "Accessibility role for the error message\nDefaults to \"alert\" for proper screen reader announcements",
              "value": { "type": "string", "default": "'alert'" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "message",
                "description": "The error message text to display",
                "type": "string"
              },
              {
                "name": "visible",
                "description": "Whether the error message is visible",
                "type": "boolean"
              },
              {
                "name": "role",
                "description": "Accessibility role for the error message\nDefaults to \"alert\" for proper screen reader announcements",
                "type": "string"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-icon",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "color",
              "value": {
                "type": "string",
                "default": "'var(--primer-color-icon-primary)'"
              }
            },
            {
              "name": "size",
              "value": { "type": "'lg' | 'md' | 'sm'", "default": "'lg'" }
            },
            {
              "name": "name",
              "description": "The name of the icon to draw - available names can be found under library.ts file",
              "value": { "type": "IconName | undefined" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "color", "type": "string" },
              { "name": "size", "type": "'lg' | 'md' | 'sm'" },
              {
                "name": "name",
                "description": "The name of the icon to draw - available names can be found under library.ts file",
                "type": "IconName | undefined"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input",
          "description": "A fully type-safe input component that wraps the native HTML input element\nwhile providing additional functionality and styling.\n---\n\n\n### **Events:**\n - **focus** - Fired when the input receives focus\n- **blur** - Fired when the input loses focus\n- **invalid** - Fired when the input fails validation\n- **input** - Fired when the input value changes\n- **change** - Fired when the input value is committed\n\n### **Methods:**\n - **focus(options: _FocusOptions_): _void_** - Focus the input element\n- **blur(): _void_** - Remove focus from the input element\n- **select(): _void_** - Select all text in the input element\n- **setSelectionRange(start: _number_, end: _number_, direction: _'forward' | 'backward' | 'none'_): _void_** - Set the selection range of the input element\n- **checkValidity(): _boolean_** - Check if the input element is valid\n- **reportValidity(): _boolean_** - Report the validity of the input element\n- **addEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | AddEventListenerOptions_): _void_** - Type safe event dispatcher - allows consumers to use proper types\nwhen listening to events from this component\n- **removeEventListener(type: _K_, listener: _(ev: InputEventMap[K]) => void_, options: _boolean | EventListenerOptions_): _void_** - Type safe event dispatcher removal\n\n### **CSS Parts:**\n - **input** - The native input element",
          "doc-url": "",
          "attributes": [
            { "name": "value", "value": { "type": "string", "default": "''" } },
            {
              "name": "placeholder",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "disabled",
              "value": { "type": "boolean", "default": "false" }
            },
            { "name": "name", "value": { "type": "string", "default": "''" } },
            {
              "name": "type",
              "value": { "type": "InputType", "default": "'text'" }
            },
            {
              "name": "required",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "pattern",
              "value": { "type": "string", "default": "''" }
            },
            { "name": "minlength", "value": { "type": "number | undefined" } },
            { "name": "maxlength", "value": { "type": "number | undefined" } },
            { "name": "min", "value": { "type": "string", "default": "''" } },
            { "name": "max", "value": { "type": "string", "default": "''" } },
            { "name": "step", "value": { "type": "string", "default": "''" } },
            {
              "name": "autocomplete",
              "value": { "type": "string", "default": "''" }
            },
            { "name": "id", "value": { "type": "string", "default": "''" } }
          ],
          "events": [
            {
              "name": "focus",
              "type": "FocusEvent",
              "description": "Fired when the input receives focus"
            },
            {
              "name": "blur",
              "type": "FocusEvent",
              "description": "Fired when the input loses focus"
            },
            {
              "name": "invalid",
              "type": "Event",
              "description": "Fired when the input fails validation"
            },
            {
              "name": "input",
              "description": "Fired when the input value changes"
            },
            {
              "name": "change",
              "description": "Fired when the input value is committed"
            }
          ],
          "js": {
            "properties": [
              { "name": "value", "type": "string" },
              { "name": "placeholder", "type": "string" },
              { "name": "disabled", "type": "boolean" },
              { "name": "name", "type": "string" },
              { "name": "type", "type": "InputType" },
              { "name": "required", "type": "boolean" },
              { "name": "readonly", "type": "boolean" },
              { "name": "pattern", "type": "string" },
              { "name": "minlength", "type": "number | undefined" },
              { "name": "maxlength", "type": "number | undefined" },
              { "name": "min", "type": "string" },
              { "name": "max", "type": "string" },
              { "name": "step", "type": "string" },
              { "name": "autocomplete", "type": "string" },
              { "name": "id", "type": "string" },
              {
                "name": "validity",
                "description": "Get the validity state of the input element",
                "type": "ValidityState"
              },
              {
                "name": "validationMessage",
                "description": "Get the validation message of the input element",
                "type": "string"
              }
            ],
            "events": [
              {
                "name": "focus",
                "type": "FocusEvent",
                "description": "Fired when the input receives focus"
              },
              {
                "name": "blur",
                "type": "FocusEvent",
                "description": "Fired when the input loses focus"
              },
              {
                "name": "invalid",
                "type": "Event",
                "description": "Fired when the input fails validation"
              },
              {
                "name": "input",
                "description": "Fired when the input value changes"
              },
              {
                "name": "change",
                "description": "Fired when the input value is committed"
              }
            ]
          }
        },
        {
          "name": "primer-input-error",
          "description": "Input error component for displaying form validation messages\n---\n\n\n### **Slots:**\n - _default_ - Default slot for error message content",
          "doc-url": "",
          "attributes": [
            {
              "name": "for",
              "description": "ID of the form control this error message is associated with",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "active",
              "description": "Whether the error is currently active/visible",
              "value": { "type": "boolean", "default": "true" }
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Default slot for error message content"
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "for",
                "description": "ID of the form control this error message is associated with",
                "type": "string"
              },
              {
                "name": "active",
                "description": "Whether the error is currently active/visible",
                "type": "boolean"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input-label",
          "description": "Input label component for form elements\n---\n\n\n### **Slots:**\n - _default_ - Default slot for label text content",
          "doc-url": "",
          "attributes": [
            {
              "name": "for",
              "description": "ID of the form control this label is associated with",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "disabled",
              "description": "Whether the label should appear disabled",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            { "name": "", "description": "Default slot for label text content" }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "for",
                "description": "ID of the form control this label is associated with",
                "type": "string"
              },
              {
                "name": "disabled",
                "description": "Whether the label should appear disabled",
                "type": "boolean"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input-wrapper",
          "description": "A wrapper component for input elements that handles focus styling and interactions.\nProvides an improved user experience by making the entire wrapper clickable to focus the inner input.\n\nFeatures:\n- Automatically focuses primer-input elements when wrapper is clicked\n- Dispatches wrapper-click events for iframe-based hosted inputs\n- Sets proper cursor styling to indicate text input functionality\n---\n\n\n### **Events:**\n - **wrapper-click**",
          "doc-url": "",
          "attributes": [
            {
              "name": "focusWithin",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "has-error",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [{ "name": "wrapper-click", "type": "CustomEvent" }],
          "js": {
            "properties": [
              { "name": "focusWithin", "type": "boolean" },
              { "name": "hasError", "type": "boolean" }
            ],
            "events": [{ "name": "wrapper-click", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-portal",
          "description": "\n---\n\n\n### **Events:**\n - **eventName**",
          "doc-url": "",
          "attributes": [],
          "events": [{ "name": "eventName", "type": "CustomEvent" }],
          "js": {
            "properties": [{ "name": "id", "type": "string" }],
            "events": [{ "name": "eventName", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-spinner",
          "description": "Spinner component with configurable size and color\nAdapted to work both standalone and within input components\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "color",
              "description": "Color of the spinner\nDefaults to the design system loader color",
              "value": {
                "type": "string",
                "default": "'var(--primer-color-loader)'"
              }
            },
            {
              "name": "size",
              "description": "Size of the spinner\nAvailable values: 'small', 'medium', 'large' or a custom number as string",
              "value": { "type": "SpinnerSize | string", "default": "'medium'" }
            },
            {
              "name": "compact",
              "description": "Whether to use compact mode (minimal margins)\nUseful when embedding in inputs",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "color",
                "description": "Color of the spinner\nDefaults to the design system loader color",
                "type": "string"
              },
              {
                "name": "size",
                "description": "Size of the spinner\nAvailable values: 'small', 'medium', 'large' or a custom number as string",
                "type": "SpinnerSize | string"
              },
              {
                "name": "compact",
                "description": "Whether to use compact mode (minimal margins)\nUseful when embedding in inputs",
                "type": "boolean"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-ach-payment",
          "description": "\n---\n\n\n### **Events:**\n - **primer-ach-error**\n- **primer-ach-bank-details-collected**\n- **primer-ach-mandate-confirmed**\n- **primer-ach-mandate-declined**",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentMethod",
              "value": { "type": "InitializedPaymentMethod | undefined" }
            }
          ],
          "events": [
            { "name": "primer-ach-error", "type": "CustomEvent" },
            {
              "name": "primer-ach-bank-details-collected",
              "type": "CustomEvent"
            },
            { "name": "primer-ach-mandate-confirmed", "type": "CustomEvent" },
            { "name": "primer-ach-mandate-declined", "type": "CustomEvent" }
          ],
          "js": {
            "properties": [
              {
                "name": "paymentMethod",
                "type": "InitializedPaymentMethod | undefined"
              },
              { "name": "paymentManagers", "type": "InitializedManagersMap" },
              { "name": "sdkState", "type": "SdkStateContext | undefined" },
              {
                "name": "clientOptions",
                "type": "ClientOptionsContext | undefined"
              },
              { "name": "screen", "type": "'form' | 'mandate'" }
            ],
            "events": [
              { "name": "primer-ach-error", "type": "CustomEvent" },
              {
                "name": "primer-ach-bank-details-collected",
                "type": "CustomEvent"
              },
              { "name": "primer-ach-mandate-confirmed", "type": "CustomEvent" },
              { "name": "primer-ach-mandate-declined", "type": "CustomEvent" }
            ]
          }
        },
        {
          "name": "primer-card-form",
          "description": "CardFormComponent serves as a container for card input components.\nIt handles form submission, validation, and provides context to child components.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "hide-labels",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "paymentManagers",
              "description": "Payment managers injected from context",
              "value": {
                "type": "InitializedManagersMap",
                "default": "new Map()"
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "hideLabels", "type": "boolean" },
              {
                "name": "paymentManagers",
                "description": "Payment managers injected from context",
                "type": "InitializedManagersMap"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-dynamic-payment",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentMethod",
              "value": { "type": "InitializedPaymentMethod | undefined" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "paymentMethod",
                "type": "InitializedPaymentMethod | undefined"
              },
              { "name": "paymentManagers", "type": "InitializedManagersMap" },
              { "name": "sdkState", "type": "SdkStateContext" },
              { "name": "headlessUtils", "type": "HeadlessUnitilsContext" },
              { "name": "open", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-error-message-container",
          "description": "A container component that connects to the SDK state context\nand displays appropriate error messages based on error state.\n\nThis component handles both process errors (typically from backend)\nand validation errors (typically from client-side), managing when\nand how they are displayed based on the current SDK state.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "show-processing-errors",
              "value": { "type": "boolean", "default": "true" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "showProcessingErrors", "type": "boolean" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-klarna",
          "description": "This component renders Klarna payment method in a card-like (accordion) container with\npayment categories options to choose from.\n\n[ Pay with Klarna    v ] --> accordion header\n\n[ Pay Now ] [ Buy now, pay later ] --> payment categories options from Klarna\n[ Continue with Klarna ] --> opens a Klarna popup\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentManagers",
              "value": {
                "type": "InitializedManagersMap",
                "default": "new Map()"
              }
            },
            {
              "name": "sdkState",
              "value": { "type": "SdkStateContext", "default": "null" }
            },
            {
              "name": "headlessUtils",
              "value": { "type": "HeadlessUnitilsContext", "default": "null" }
            },
            {
              "name": "klarnaCategories",
              "value": {
                "type": "KlarnaCategoriesContext | null",
                "default": "null"
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "paymentManagers", "type": "InitializedManagersMap" },
              { "name": "sdkState", "type": "SdkStateContext" },
              { "name": "headlessUtils", "type": "HeadlessUnitilsContext" },
              {
                "name": "klarnaCategories",
                "type": "KlarnaCategoriesContext | null"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-native-payment",
          "description": "Component for rendering native payment buttons (Apple Pay, Google Pay, PayPal)\nwith proper height calculations based on design system variables.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentMethod",
              "value": { "type": "InitializedPaymentMethod | undefined" }
            },
            {
              "name": "paymentManagers",
              "value": {
                "type": "InitializedManagersMap",
                "default": "new Map()"
              }
            },
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "paymentMethod",
                "type": "InitializedPaymentMethod | undefined"
              },
              { "name": "paymentManagers", "type": "InitializedManagersMap" },
              { "name": "computedStyles", "type": "CSSStyleDeclaration | null" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-payment-method",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "type",
              "value": {
                "type": "PaymentMethodType | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "paymentMethods",
              "value": { "type": "PaymentMethodsContext", "default": "null" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "type", "type": "PaymentMethodType | undefined" },
              { "name": "paymentMethods", "type": "PaymentMethodsContext" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-checkout-complete",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "primer-checkout-error",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "sdkState",
              "value": { "type": "SdkStateContext", "default": "null" }
            }
          ],
          "events": [],
          "js": {
            "properties": [{ "name": "sdkState", "type": "SdkStateContext" }],
            "events": []
          }
        },
        {
          "name": "primer-main",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentMethods",
              "value": { "type": "PaymentMethodsContext", "default": "null" }
            },
            {
              "name": "sdkState",
              "value": { "type": "SdkStateContext", "default": "null" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "paymentMethods", "type": "PaymentMethodsContext" },
              { "name": "sdkState", "type": "SdkStateContext" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-redirect-payment",
          "description": "\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "paymentMethod",
              "value": { "type": "InitializedPaymentMethod | undefined" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "paymentMethod",
                "type": "InitializedPaymentMethod | undefined"
              },
              { "name": "paymentManagers", "type": "InitializedManagersMap" },
              { "name": "sdkState", "type": "SdkStateContext" },
              { "name": "headlessUtils", "type": "HeadlessUnitilsContext" }
            ],
            "events": []
          }
        },
        {
          "name": "primer-show-other-payments",
          "description": "Component for showing/hiding other payment methods when vault is present\nUtilizes the collapsable component for smooth transitions\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "vaultManager",
                "description": "Consume the vault manager context to interact with vault state",
                "type": "VaultManagerContext"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-vault-manager",
          "description": "VaultManagerComponent - displays and manages saved payment methods\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "animationDuration",
              "description": "Animation duration override",
              "value": { "type": "number", "default": "300" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "addEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "removeEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              { "name": "vaultManagerContext", "type": "VaultManagerContext" },
              {
                "name": "animationDuration",
                "description": "Animation duration override",
                "type": "number"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-card-form-submit",
          "description": "A form submit button component for card forms.\nProvides a consistent submit button with translation support.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "buttonText",
              "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "headlessInstance",
              "value": { "type": "HeadlessUnitilsContext", "default": "null" }
            },
            {
              "name": "clientOptions",
              "value": { "type": "ClientOptionsContext", "default": "null" }
            },
            {
              "name": "sdkState",
              "value": { "type": "SdkStateContext", "default": "null" }
            },
            {
              "name": "variant",
              "description": "The button variant to use.",
              "value": { "type": "string", "default": "'primary'" }
            },
            {
              "name": "disabled",
              "description": "Whether the button is disabled.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "buttonText",
                "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              { "name": "headlessInstance", "type": "HeadlessUnitilsContext" },
              { "name": "clientOptions", "type": "ClientOptionsContext" },
              { "name": "sdkState", "type": "SdkStateContext" },
              {
                "name": "variant",
                "description": "The button variant to use.",
                "type": "string"
              },
              {
                "name": "disabled",
                "description": "Whether the button is disabled.",
                "type": "boolean"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-card-network-selector",
          "description": "Component for displaying and selecting card networks\nUses context directly rather than properties\n---\n\n\n### **Events:**\n - **network-selected** - Dispatched when a network is selected with the network name as detail",
          "doc-url": "",
          "attributes": [],
          "events": [
            {
              "name": "network-selected",
              "type": "CustomEvent",
              "description": "Dispatched when a network is selected with the network name as detail"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "cardNetworks",
                "description": "Card networks context from provider",
                "type": "CardNetworksContext"
              },
              { "name": "headlessUtils", "type": "HeadlessUnitilsContext" }
            ],
            "events": [
              {
                "name": "network-selected",
                "type": "CustomEvent",
                "description": "Dispatched when a network is selected with the network name as detail"
              }
            ]
          }
        },
        {
          "name": "primer-input-card-expiry",
          "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            },
            {
              "name": "label",
              "description": "The input label text.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "placeholder",
              "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
              "value": { "type": "string" }
            },
            {
              "name": "aria-label",
              "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "cardFormContext", "type": "CardFormContext | null" },
              {
                "name": "computedStyles",
                "type": "CSSStyleDeclaration | null"
              },
              {
                "name": "label",
                "description": "The input label text.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              {
                "name": "placeholder",
                "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
                "type": "string"
              },
              {
                "name": "ariaLabel",
                "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input-card-holder-name",
          "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            },
            {
              "name": "label",
              "description": "The input label text.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "placeholder",
              "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
              "value": { "type": "string" }
            },
            {
              "name": "aria-label",
              "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "cardFormContext", "type": "CardFormContext | null" },
              {
                "name": "computedStyles",
                "type": "CSSStyleDeclaration | null"
              },
              {
                "name": "label",
                "description": "The input label text.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              {
                "name": "placeholder",
                "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
                "type": "string"
              },
              {
                "name": "ariaLabel",
                "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input-card-number",
          "description": "Card number input component with dynamic card network detection and selection\n---\n\n\n### **Methods:**\n \n\n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code",
          "doc-url": "",
          "attributes": [
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            },
            {
              "name": "label",
              "description": "The input label text.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "placeholder",
              "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
              "value": { "type": "string" }
            },
            {
              "name": "aria-label",
              "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "cardFormContext", "type": "CardFormContext | null" },
              {
                "name": "computedStyles",
                "type": "CSSStyleDeclaration | null"
              },
              {
                "name": "label",
                "description": "The input label text.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              {
                "name": "placeholder",
                "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
                "type": "string"
              },
              {
                "name": "ariaLabel",
                "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-input-cvv",
          "description": "\n---\n\n\n### **Methods:**\n \n- **getError(): _string|null_** - Get the error code from the hosted input controller when the input is submitted or touched\n\nCan be used instead of the error returned by the `validate()` method since internally `primer-sdk-web`\nuses the same logic to compute the error code\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            },
            {
              "name": "label",
              "description": "The input label text.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "placeholder",
              "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
              "value": { "type": "string" }
            },
            {
              "name": "aria-label",
              "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              { "name": "cardFormContext", "type": "CardFormContext | null" },
              {
                "name": "computedStyles",
                "type": "CSSStyleDeclaration | null"
              },
              {
                "name": "label",
                "description": "The input label text.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              {
                "name": "placeholder",
                "description": "The input placeholder text.\nFalls back to localized default if not explicitly set.\nWhen explicitly set to empty string, no placeholder will be displayed.",
                "type": "string"
              },
              {
                "name": "ariaLabel",
                "description": "The input aria-label attribute.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-vault-cvv-input",
          "description": "CVV Input component for vault payment methods\nRenders a secure iframe for CVV input when required by the selected payment method\nUses dedicated CVV context to minimize re-renders\n---\n\n\n### **Methods:**\n - **onCvvInputChange()** - Update CVV metadata in the context when input changes",
          "doc-url": "",
          "attributes": [
            {
              "name": "computedStyles",
              "value": {
                "type": "CSSStyleDeclaration | null",
                "default": "null"
              }
            },
            {
              "name": "paymentMethod",
              "value": {
                "type": "PaymentCardVaultedMethod | null",
                "default": "null"
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "vaultManagerFormContext",
                "description": "Form context for checking form dirty state",
                "type": "VaultManagerContext"
              },
              {
                "name": "vaultManagerCvvContext",
                "description": "CVV-specific context for dedicated CVV handling\nSeparated to minimize re-renders on frequent CVV input changes",
                "type": "VaultItemContext"
              },
              {
                "name": "computedStyles",
                "type": "CSSStyleDeclaration | null"
              },
              {
                "name": "paymentMethod",
                "type": "PaymentCardVaultedMethod | null"
              }
            ],
            "events": []
          }
        },
        {
          "name": "primer-vault-delete-confirmation",
          "description": "VaultDeleteConfirmationComponent - displays confirmation UI for deleting a payment method\n---\n\n\n### **Events:**\n - **confirm-delete**\n- **cancel-delete**",
          "doc-url": "",
          "attributes": [
            {
              "name": "isDeleting",
              "description": "Whether a delete operation is in progress",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "paymentMethodId",
              "description": "The ID of the payment method being deleted",
              "value": { "type": "string", "default": "''" }
            },
            {
              "name": "paymentMethodName",
              "description": "Payment method name to display in confirmation",
              "value": { "type": "string", "default": "''" }
            }
          ],
          "events": [
            { "name": "confirm-delete", "type": "CustomEvent" },
            { "name": "cancel-delete", "type": "CustomEvent" }
          ],
          "js": {
            "properties": [
              {
                "name": "addEventListener",
                "description": "Strongly typed event declarations",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "removeEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "isDeleting",
                "description": "Whether a delete operation is in progress",
                "type": "boolean"
              },
              {
                "name": "paymentMethodId",
                "description": "The ID of the payment method being deleted",
                "type": "string"
              },
              {
                "name": "paymentMethodName",
                "description": "Payment method name to display in confirmation",
                "type": "string"
              },
              {
                "name": "vaultManager",
                "description": "Consume the vault manager context to access payment method info",
                "type": "VaultManagerContext"
              }
            ],
            "events": [
              { "name": "confirm-delete", "type": "CustomEvent" },
              { "name": "cancel-delete", "type": "CustomEvent" }
            ]
          }
        },
        {
          "name": "primer-vault-empty-state",
          "description": "VaultEmptyStateComponent - displays when no payment methods are available\n---\n",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "primer-vault-error-message",
          "description": "VaultErrorMessageComponent - displays error messages with improved visuals\n---\n\n\n### **Events:**\n - **close-error**",
          "doc-url": "",
          "attributes": [
            {
              "name": "errorMessage",
              "description": "The error message to display",
              "value": { "type": "string", "default": "''" }
            }
          ],
          "events": [{ "name": "close-error", "type": "CustomEvent" }],
          "js": {
            "properties": [
              {
                "name": "addEventListener",
                "description": "Strongly typed event declarations",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "removeEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "errorMessage",
                "description": "The error message to display",
                "type": "string"
              }
            ],
            "events": [{ "name": "close-error", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-vault-manager-header",
          "description": "VaultManagerHeaderComponent - displays the header for the vault manager\n---\n\n\n### **Events:**\n - **toggle-edit-mode**",
          "doc-url": "",
          "attributes": [
            {
              "name": "isEditMode",
              "description": "Whether we're in edit mode",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hasPaymentMethods",
              "description": "Whether we have payment methods to edit",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [{ "name": "toggle-edit-mode", "type": "CustomEvent" }],
          "js": {
            "properties": [
              {
                "name": "addEventListener",
                "description": "Strongly typed event declarations",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "removeEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "isEditMode",
                "description": "Whether we're in edit mode",
                "type": "boolean"
              },
              {
                "name": "hasPaymentMethods",
                "description": "Whether we have payment methods to edit",
                "type": "boolean"
              }
            ],
            "events": [{ "name": "toggle-edit-mode", "type": "CustomEvent" }]
          }
        },
        {
          "name": "primer-vault-payment-method-item",
          "description": "VaultPaymentMethodItemComponent - displays a single payment method\nUses the VaultManagerController for display formatting\nNow supports selection via the simplified button checked state\nEnhanced with smooth transitions between edit and payment modes\nAlways renders the primer-button for consistent UI and improved accessibility\n---\n\n\n### **Events:**\n - **delete-payment-method**",
          "doc-url": "",
          "attributes": [
            {
              "name": "headlessUtils",
              "value": { "type": "HeadlessUnitilsContext", "default": "null" }
            },
            {
              "name": "isEditMode",
              "description": "Whether the component is in edit mode",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [
            { "name": "delete-payment-method", "type": "CustomEvent" }
          ],
          "js": {
            "properties": [
              {
                "name": "addEventListener",
                "description": "Strongly typed event declarations",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "removeEventListener",
                "type": "<K extends keyof VaultManagerEventMap>(\n    type: K,\n    listener: (ev: VaultManagerEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions,\n  ) => void"
              },
              {
                "name": "vaultManagerContext",
                "description": "Consume the vault manager context",
                "type": "VaultManagerContext"
              },
              { "name": "vaultItemContext", "type": "VaultItemContext" },
              { "name": "headlessUtils", "type": "HeadlessUnitilsContext" },
              {
                "name": "paymentMethod",
                "description": "The payment method to display",
                "type": "VaultedPaymentMethod | null"
              },
              {
                "name": "isEditMode",
                "description": "Whether the component is in edit mode",
                "type": "boolean"
              }
            ],
            "events": [
              { "name": "delete-payment-method", "type": "CustomEvent" }
            ]
          }
        },
        {
          "name": "primer-vault-payment-submit",
          "description": "A submit button component for vault payment flows.\nProvides a consistent submit button with translation support.\nIntegrates with the vault manager context to handle payment submission.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "buttonText",
              "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
              "value": { "type": "string" }
            },
            {
              "name": "headlessInstance",
              "value": { "type": "HeadlessUnitilsContext", "default": "null" }
            },
            {
              "name": "sdkState",
              "value": { "type": "SdkStateContext", "default": "null" }
            },
            {
              "name": "variant",
              "description": "The button variant to use.",
              "value": { "type": "string", "default": "'primary'" }
            },
            {
              "name": "disabled",
              "description": "Whether the button is disabled.\nThis property allows external disabling of the button\nregardless of the context state.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "buttonText",
                "description": "The button text to display.\nFalls back to localized default if not explicitly set.",
                "type": "string"
              },
              { "name": "headlessInstance", "type": "HeadlessUnitilsContext" },
              { "name": "sdkState", "type": "SdkStateContext" },
              { "name": "vaultItemContext", "type": "VaultItemContext" },
              { "name": "vaultManager", "type": "VaultManagerContext" },
              {
                "name": "clientOptions",
                "type": "PrimerCheckoutOptions | null"
              },
              {
                "name": "variant",
                "description": "The button variant to use.",
                "type": "string"
              },
              {
                "name": "disabled",
                "description": "Whether the button is disabled.\nThis property allows external disabling of the button\nregardless of the context state.",
                "type": "boolean"
              }
            ],
            "events": []
          }
        }
      ]
    }
  }
}
